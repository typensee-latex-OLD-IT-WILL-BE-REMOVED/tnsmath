% ---------------------- %
% -- IMPORTS REQUIRED -- %
% ---------------------- %

% A
\RequirePackage{amssymb}
% C
\RequirePackage{centernot}
\RequirePackage{circledsteps}
\RequirePackage{commado}
% D
\RequirePackage{dsfont}
% E
\RequirePackage{esvect}
\PassOptionsToPackage{f}{esvect}
% F
\RequirePackage{forest}
\RequirePackage{forloop}
% I
\RequirePackage{ifmtarg}
% L
\RequirePackage{longtable}
% M
\RequirePackage{mathrsfs}
\RequirePackage{mathtools}
% N
\RequirePackage{nicematrix}
% P
\RequirePackage{pgfplots}
% R
\RequirePackage{relsize}
% S
\RequirePackage{simplekv}
\RequirePackage{stackengine}
% T
\RequirePackage{tcolorbox}
\RequirePackage{tkz-tab}
\RequirePackage{tnscom}
\RequirePackage{trimspaces}
% U
\RequirePackage{upgreek}
\PassOptionsToPackage{Symbolsmallscale}{upgreek}
% W
\RequirePackage{witharrows}
% X
\RequirePackage{xstring}

% TikZ libraries
\usetikzlibrary{babel}
\usetikzlibrary{arrows.meta}
\usetikzlibrary{calc}
\usetikzlibrary{fit}
\usetikzlibrary{backgrounds}


% ------------------ %
% -- GENERAL SETS -- %
% ------------------ %

% General sets

\newcommand\setgene{\@ifstar{\tnssets@set@gene@star}{\tnssets@set@gene@no@star}}


\newcommand\tnssets@set@gene@no@star[1]{%
    \tns@generic@interval@ext{\{}{#1}{}{}{\}}%
}

\newcommand\tnssets@set@gene@star[1]{%
    \tns@generic@interval@semi@ext{\{}{#1}{}{}{\}}%
}


% Probabilistic sets

\newcommand\setproba{\@ifstar{\tnssets@set@proba@star}{\tnssets@set@proba@no@star}}

\newcommand\tnssets@set@proba@no@star[1]{
    \IfSubStr{,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,}{,#1,}{
        \mathcal{#1}
    }{%
        \PackageError{tnssets}{Command << setproba >> only accepts single upper case letters}%
    }
}

\newcommand\tnssets@set@proba@star[2]{%
    \tnssets@set@proba@no@star{#1}_{#2}
}


% Geometric sets
%
% With ''mathscr'', we only have the upper case letters.
% So we use the following trick for lower case letters.
%
% Source:
%    * page 68 de ''The Comprehensive LATEX Symbol List''

\DeclareMathAlphabet{\mathpzc}{OT1}{pzc}{m}{it}

\newcommand\setgeo{\@ifstar{\tnssets@set@geo@star}{\tnssets@set@geo@no@star}}

\newcommand\tnssets@set@geo@no@star[1]{
    \IfSubStr{,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,}{,#1,}{
        \mathscr{#1}
    }{%
        \IfSubStr{,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,}{,#1,}{
            \mathpzc{#1}
        }{%
            \PackageError{tnssets}{Command << fieldset >> only accepts single h, k or upper case letter}%
        }
    }
}

\newcommand\tnssets@set@geo@star[2]{%
    \tnssets@set@geo@no@star{#1}_{#2}
}


% Sets for algebra
%
% Only the upper case letters and also h and k.
%
% With ''\mathbb'', there are only the upper case letters.

\newcommand\setalge{\@ifstar{\tnssets@set@alge@star}{\tnssets@set@alge@no@star}}

\newcommand\tnssets@set@alge@no@star[1]{
    \IfSubStr{,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,h,k,}{,#1,}{
        \mathds{#1}
    }{%
        \PackageError{tnssets}{Command << fieldset >> only accepts letters h or k alone, and upper case letters}%
    }
}

\newcommand\tnssets@set@alge@star[2]{%
    \tnssets@set@alge@no@star{#1}_{#2}
}


% Tools for classical sets

\newcommand\setpos{\textbf{\tiny+}}
\newcommand\setneg{\vphantom{\setpos}-}
\newcommand\set@star{\text{*}}

\newcommand\setspecial{\@ifstar{\tnssets@set@special@star}{\tnssets@set@special@no@star}}

\newcommand\tnssets@set@special@no@star[2]{
    \IfEqCase{#2}{
        {s}{ #1^{\set@star} }
        {n}{ #1^{\phantom{\set@star}}_{\setneg} }
        {p}{ #1^{\phantom{\set@star}}_{\setpos} }
        {sn}{ #1^{\set@star}_{\setneg} }
        {sp}{ #1^{\set@star}_{\setpos} }
    }
}

\newcommand\tnssets@set@special@star[2]{
    \IfEqCase{#2}{
        {s}{ #1_{\neq 0} }
        {n}{ #1_{\le 0} }
        {p}{ #1_{\ge 0} }
        {sn}{ #1_{< 0} }
        {sp}{ #1_{> 0} }
    }
}


% The empty set

\newcommand\nullset{%
    \ensuremath{\text{\scalebox{1.2}{$\varnothing$}}}%
}


% List of classical sets - START

\newcommand\NN{\ensuremath{\setalge{N}}}
\newcommand\NNs{\ensuremath{\setspecial{\NN}{s}}}

\newcommand\PP{\ensuremath{\setalge{P}}}

\newcommand\ZZ{\ensuremath{\setalge{Z}}}
\newcommand\ZZp{\ensuremath{\setspecial{\ZZ}{p}}}
\newcommand\ZZn{\ensuremath{\setspecial{\ZZ}{n}}}
\newcommand\ZZs{\ensuremath{\setspecial{\ZZ}{s}}}
\newcommand\ZZsn{\ensuremath{\setspecial{\ZZ}{sn}}}
\newcommand\ZZsp{\ensuremath{\setspecial{\ZZ}{sp}}}

\newcommand\DD{\ensuremath{\setalge{D}}}
\newcommand\DDp{\ensuremath{\setspecial{\DD}{p}}}
\newcommand\DDn{\ensuremath{\setspecial{\DD}{n}}}
\newcommand\DDs{\ensuremath{\setspecial{\DD}{s}}}
\newcommand\DDsn{\ensuremath{\setspecial{\DD}{sn}}}
\newcommand\DDsp{\ensuremath{\setspecial{\DD}{sp}}}

\newcommand\QQ{\ensuremath{\setalge{Q}}}
\newcommand\QQp{\ensuremath{\setspecial{\QQ}{p}}}
\newcommand\QQn{\ensuremath{\setspecial{\QQ}{n}}}
\newcommand\QQs{\ensuremath{\setspecial{\QQ}{s}}}
\newcommand\QQsn{\ensuremath{\setspecial{\QQ}{sn}}}
\newcommand\QQsp{\ensuremath{\setspecial{\QQ}{sp}}}

\newcommand\RR{\ensuremath{\setalge{R}}}
\newcommand\RRp{\ensuremath{\setspecial{\RR}{p}}}
\newcommand\RRn{\ensuremath{\setspecial{\RR}{n}}}
\newcommand\RRs{\ensuremath{\setspecial{\RR}{s}}}
\newcommand\RRsn{\ensuremath{\setspecial{\RR}{sn}}}
\newcommand\RRsp{\ensuremath{\setspecial{\RR}{sp}}}

\newcommand\CC{\ensuremath{\setalge{C}}}
\newcommand\CCs{\ensuremath{\setspecial{\CC}{s}}}

\newcommand\HH{\ensuremath{\setalge{H}}}
\newcommand\HHs{\ensuremath{\setspecial{\HH}{s}}}

\newcommand\OO{\ensuremath{\setalge{O}}}
\newcommand\OOs{\ensuremath{\setspecial{\OO}{s}}}

\newcommand\FF{\ensuremath{\setalge{F}}}
\newcommand\FFp{\ensuremath{\setspecial{\FF}{p}}}
\newcommand\FFn{\ensuremath{\setspecial{\FF}{n}}}
\newcommand\FFs{\ensuremath{\setspecial{\FF}{s}}}
\newcommand\FFsn{\ensuremath{\setspecial{\FF}{sn}}}
\newcommand\FFsp{\ensuremath{\setspecial{\FF}{sp}}}

% List of classical sets - END


% --------------- %
% -- INTERVALS -- %
% --------------- %

% Cf. source code of stmaryrd.

\DeclareSymbolFont{stmry}{U}{stmry}{m}{n}
\SetSymbolFont{stmry}{bold}{U}{stmry}{b}{n}

\DeclareMathDelimiter\Zlbracket{\mathopen}{stmry}{"4A}{stmry}{"71}
\DeclareMathDelimiter\Zrbracket{\mathopen}{stmry}{"4B}{stmry}{"79}


% Macros for intervals - START

% Macros for french real intervals

\newcommand\intervalCO{\@ifstar{\tnssets@intervalCO@star}{\tnssets@intervalCO@no@star}}
\newcommand\tnssets@intervalCO@no@star[2]{\ensuremath{\tns@generic@interval@ext{[}{#1}{\tnsmathsep}{#2}{[}}}
\newcommand\tnssets@intervalCO@star[2]{\ensuremath{\tns@generic@interval@semi@ext{[}{#1}{\tnsmathsep}{#2}{[}}}

\newcommand\intervalC{\@ifstar{\tnssets@intervalC@star}{\tnssets@intervalC@no@star}}
\newcommand\tnssets@intervalC@no@star[2]{\ensuremath{\tns@generic@interval@ext{[}{#1}{\tnsmathsep}{#2}{]}}}
\newcommand\tnssets@intervalC@star[2]{\ensuremath{\tns@generic@interval@semi@ext{[}{#1}{\tnsmathsep}{#2}{]}}}

\newcommand\intervalO{\@ifstar{\tnssets@intervalO@star}{\tnssets@intervalO@no@star}}
\newcommand\tnssets@intervalO@no@star[2]{\ensuremath{\tns@generic@interval@ext{]}{#1}{\tnsmathsep}{#2}{[}}}
\newcommand\tnssets@intervalO@star[2]{\ensuremath{\tns@generic@interval@semi@ext{]}{#1}{\tnsmathsep}{#2}{[}}}

\newcommand\intervalOC{\@ifstar{\tnssets@intervalOC@star}{\tnssets@intervalOC@no@star}}
\newcommand\tnssets@intervalOC@no@star[2]{\ensuremath{\tns@generic@interval@ext{]}{#1}{\tnsmathsep}{#2}{]}}}
\newcommand\tnssets@intervalOC@star[2]{\ensuremath{\tns@generic@interval@semi@ext{]}{#1}{\tnsmathsep}{#2}{]}}}

% Macros for american real intervals

\newcommand\intervalCP{\@ifstar{\tnssets@intervalCP@star}{\tnssets@intervalCP@no@star}}
\newcommand\tnssets@intervalCP@no@star[2]{\ensuremath{\tns@generic@interval@ext{[}{#1}{\tnsmathsep}{#2}{)}}}
\newcommand\tnssets@intervalCP@star[2]{\ensuremath{\tns@generic@interval@semi@ext{[}{#1}{\tnsmathsep}{#2}{)}}}

\newcommand\intervalP{\@ifstar{\tnssets@intervalP@star}{\tnssets@intervalP@no@star}}
\newcommand\tnssets@intervalP@no@star[2]{\ensuremath{\tns@generic@interval@ext{(}{#1}{\tnsmathsep}{#2}{)}}}
\newcommand\tnssets@intervalP@star[2]{\ensuremath{\tns@generic@interval@semi@ext{(}{#1}{\tnsmathsep}{#2}{)}}}

\newcommand\intervalPC{\@ifstar{\tnssets@intervalPC@star}{\tnssets@intervalPC@no@star}}
\newcommand\tnssets@intervalPC@no@star[2]{\ensuremath{\tns@generic@interval@ext{(}{#1}{\tnsmathsep}{#2}{]}}}
\newcommand\tnssets@intervalPC@star[2]{\ensuremath{\tns@generic@interval@semi@ext{(}{#1}{\tnsmathsep}{#2}{]}}}

% Macros for discrete intervals

\newcommand\ZintervalCO{\@ifstar{\tnssets@ZintervalCO@star}{\tnssets@ZintervalCO@no@star}}
\newcommand\tnssets@ZintervalCO@no@star[2]{\ensuremath{\tns@generic@interval@ext{\Zlbracket}{#1}{\tnsmathsep}{#2}{\Zlbracket}}}
\newcommand\tnssets@ZintervalCO@star[2]{\ensuremath{\tns@generic@interval@semi@ext{\Zlbracket}{#1}{\tnsmathsep}{#2}{\Zlbracket}}}

\newcommand\ZintervalC{\@ifstar{\tnssets@ZintervalC@star}{\tnssets@ZintervalC@no@star}}
\newcommand\tnssets@ZintervalC@no@star[2]{\ensuremath{\tns@generic@interval@ext{\Zlbracket}{#1}{\tnsmathsep}{#2}{\Zrbracket}}}
\newcommand\tnssets@ZintervalC@star[2]{\ensuremath{\tns@generic@interval@semi@ext{\Zlbracket}{#1}{\tnsmathsep}{#2}{\Zrbracket}}}

\newcommand\ZintervalO{\@ifstar{\tnssets@ZintervalO@star}{\tnssets@ZintervalO@no@star}}
\newcommand\tnssets@ZintervalO@no@star[2]{\ensuremath{\tns@generic@interval@ext{\Zrbracket}{#1}{\tnsmathsep}{#2}{\Zlbracket}}}
\newcommand\tnssets@ZintervalO@star[2]{\ensuremath{\tns@generic@interval@semi@ext{\Zrbracket}{#1}{\tnsmathsep}{#2}{\Zlbracket}}}

\newcommand\ZintervalOC{\@ifstar{\tnssets@ZintervalOC@star}{\tnssets@ZintervalOC@no@star}}
\newcommand\tnssets@ZintervalOC@no@star[2]{\ensuremath{\tns@generic@interval@ext{\Zrbracket}{#1}{\tnsmathsep}{#2}{\Zrbracket}}}
\newcommand\tnssets@ZintervalOC@star[2]{\ensuremath{\tns@generic@interval@semi@ext{\Zrbracket}{#1}{\tnsmathsep}{#2}{\Zrbracket}}}

% Macros for intervals - END


% --------------- %
% -- OPERATORS -- %
% --------------- %

\newcommand\@display@this[3]{\mathop{\raisebox{#1}{\scalebox{#2}{$#3$}}}\limits}

\newcommand\dcup{\@display@this{.05em}{0.8}{\bigcup}}
\newcommand\dsqcup{\@display@this{.05em}{0.8}{\bigsqcup}}
\newcommand\dcap{\@display@this{.05em}{0.8}{\bigcap}}


% -------------------------- %
% -- SPECIAL APPLICATIONS -- %
% -------------------------- %

% Classical functions - START

\DeclareMathOperator*{\id}{\operatorname{Id}}

\DeclareMathOperator{\caract}{\chi}
\DeclareMathOperator{\caractone}{\mathds{1}}


% ---------------- %
% -- IMAGE N CO -- %
% ---------------- %

\newcommand\card{\@ifstar{\tnssets@card@star}{\tnssets@card@no@star}}

\DeclareMathOperator{\tnssets@card@no@star}{\operatorname{card}}

\newcommand\tnssets@card@star{\#}


\DeclareMathOperator{\im}{\operatorname{im}}
\DeclareMathOperator{\dom}{\operatorname{dom}}
\DeclareMathOperator{\codom}{\operatorname{codom}}


% ----------------- %
% -- APPLICATONS -- %
% ----------------- %

\newcommand\@rel@scale[3]{\mathrel{\scalebox{#1}[#2]{$#3$}}}

\newcommand\onetoone{\@rel@scale{1.1}{1.3}{\rightarrowtail}}
\newcommand\onto{\@rel@scale{1.1}{1.3}{\twoheadrightarrow}}
\newcommand\biject{\mathrel{\mathrlap{\onetoone}\mkern0.9mu\onto}}
 
    
\newcommand\tnsgeo@partial@deco[3]{\stackMath\mathrel{\stackinset{c}{#1}{c}{#2}{\scalebox{1}[0.4]{$\vert$}}{#3}}}

\newcommand\pto{\tnsgeo@partial@deco{-0.1ex}{0.15ex}{\to}}
\newcommand\ponetoone{\tnsgeo@partial@deco{0ex}{0ex}{\onetoone}}
\newcommand\ponto{\tnsgeo@partial@deco{-0.3ex}{0ex}{\onto}}
\newcommand\pbiject{\tnsgeo@partial@deco{-0.25ex}{0ex}{\biject}}


% ------------------ %
% -- EXPLICIT DEF -- %
% ------------------ %

% Argument #1: option s or sp
% Argument #2: function
% Argument #3: variable
% Argument #4: formula
% Argument #5: initial set
% Argument #6: final set

\newcommand\funcdef[6][u]{%
    %
    \IfEqCase{#1}{%
        {u}{\let\callit\tnsana@func@def@usual}%
        {s}{\let\callit\tnsana@func@def@no@vrule}%
        {h}{\let\callit\tnsana@func@def@inline}%
    }[%
        \PackageError{tnsana}{unknown option}%
                             {you can use u (default), s and h}%
    ]%
    %
	\callit{#2}{#3}{#4}{#5}{#6}%
}


% Argument #1: function
% Argument #2: variable
% Argument #3: formula
% Argument #4: initial set
% Argument #5: final set

\newcommand\tnsana@func@def@inline[5]{%
	#1 : #2%
	\if\relax\detokenize{#4}\relax\else%
		\in #4%
	\fi%
	\mapsto #3%
	\if\relax\detokenize{#5}\relax\else%
		\in #5%
	\fi%
}

\newcommand\txtfuncdef[5]{%
	$#1(#2) = #3$%
	\if\relax\detokenize{#4}\relax\else%
		\space pour $#2 \in #4$%
	\fi%
	\if\relax\detokenize{#5}\relax\else%
		\space \emph{(on sait que $#1(#2) \in #5$%
		\space est toujours vérifié)}%
	\fi%
}


% Argument #1: separator after the colon
% Argument #2: space after the separator
%
% Argument #3: function
% Argument #4: variable
% Argument #5: formula
% Argument #6: initial set
% Argument #7: final set

\newcommand\tnsana@func@def@vertabstract[7]{%
	\begin{array}[t]{l@#1@{\kern#2}r@{\kern.5ex}c@{\;}l}
		#3\kern.5ex\colon & #6 & \rightarrow & #7 \\
			              & #4 & \mapsto     & #5%
	\end{array}
}


\newcommand\tnsana@func@def@usual[5]{%
	\tnsana@func@def@vertabstract{{\kern.8ex}|}{.9ex}{#1}{#2}{#3}{#4}{#5}%
}


\newcommand\tnsana@func@def@no@vrule[5]{%
	\tnsana@func@def@vertabstract{{\kern0ex}}{.5ex}{#1}{#2}{#3}{#4}{#5}%
}


% ----------------- %
% -- COMPOSITION -- %
% ----------------- %

\newcommand\compo{%
	\operatorname{\text{\raise0.15ex\hbox{\scalebox{0.75}{$\circ$}}}}%
}

%    #1: option for the formatting.
%
%    #2: the function.
%    #3: the order.

\newcommand\multicompo[3][r]{%
	\IfEqCase{#1}{%
        {r}{\let\callit\tnssets@multi@compo@rafter}%
        {exp}{\let\callit\tnssets@multi@compo@expand}%
        {dot}{\let\callit\tnssets@multi@compo@dot}%
    }[%
        \PackageError{tnssets}{unknown option}%
                              {you can use c (default), e, exp and dot}%
    ]%
    %
    \callit{#2}{#3}%
}


\newcommand\tnssets@multi@compo@rafter[2]{%
	#1^{\kern.1ex\langle\kern.15ex#2\kern.15ex\rangle}%
}


\newcommand\tnssets@multi@compo@dot[2]{%
	#1 \compo \cdots \compo #1%
}


\newcounter{tnssets@multi@compo@counter}

\newcommand\tnssets@multi@compo@expand[2]{%
	#1%
	\forloop{tnssets@multi@compo@counter}%
	        {1}%
	        {\value{tnssets@multi@compo@counter} < #2}{%
    	 \compo #1%
    }%
}


% --------------------- %
% -- SPACE LOGIC NEG -- %
% --------------------- %

% Logic negation roots

\let\stdneg\neg
\renewcommand\neg{%
    \stdneg\,%
}


% ----------------- %
% -- SPECIAL OPE -- %
% ----------------- %

% == Specific characters from mathabx == %

% Source:
%    * https://tex.stackexchange.com/a/585285/6880

\DeclareFontFamily{U}{mathb}{}
\DeclareFontShape{U}{mathb}{m}{n}{
  <-5.5> mathb5
  <5.5-6.5> mathb6
  <6.5-7.5> mathb7
  <7.5-8.5> mathb8
  <8.5-9.5> mathb9
  <9.5-11> mathb10
  <11-> mathb12
}{}
\DeclareSymbolFont{mathb}{U}{mathb}{m}{n}
\DeclareFontSubstitution{U}{mathb}{m}{n}

\DeclareMathSymbol{\tnslog@leftleftharpoons}  {3}{mathb}{"D8}
\DeclareMathSymbol{\tnslog@rightrightharpoons}{3}{mathb}{"D9}


\DeclareFontFamily{U}{matha}{}
\DeclareFontShape{U}{matha}{m}{n}{
  <-5.5> matha5
  <5.5-6.5> matha6
  <6.5-7.5> matha7
  <7.5-8.5> matha8
  <8.5-9.5> matha9
  <9.5-11> matha10
  <11-> matha12
}{}
\DeclareSymbolFont{matha}{U}{matha}{m}{n}
\DeclareFontSubstitution{U}{matha}{m}{n}

\DeclareMathSymbol{\tnslog@rightleftharpoons}{\mathrel}{matha}{"E9}


% == Vertical versions == %


\newcommand\viff{\mathrel{\Updownarrow}}
\newcommand\vimplies{\mathrel{\Downarrow}}
\newcommand\vbecauseof{\mathrel{\Uparrow}}

\newcommand\nviff{\centernot\viff}
\newcommand\nvimplies{\centernot\vimplies}
\newcommand\nvbecauseof{\centernot\vbecauseof}


% == Decorations - START == %

% Source for the short sysmbols.
%    * https://tex.stackexchange.com/a/585267/6880

\newcommand\shorteq{\mathrel{\mathpalette\shorteq@{.55}}}
\newcommand{\shorteq@}[2]{%
  \resizebox{#2\width}{\height}{$\m@th#1=$}%
}

\newcommand\shortless{\mathrel{\mathpalette\shortless@{.55}}}
\newcommand{\shortless@}[2]{%
  \resizebox{#2\width}{\height}{$\m@th#1<$}%
}

\newcommand\shortgtr{\mathrel{\mathpalette\shortgtr@{.55}}}
\newcommand{\shortgtr@}[2]{%
  \resizebox{#2\width}{\height}{$\m@th#1>$}%
}

% Decorable operators.

\newcommand\coldecoope{blue}

\newcommand\txtdecoope[1]{%
	\text{\tiny\color{\coldecoope}#1}%
}

\newcommand\eq{\@ifstar{\tnslog@eq@star}{\tnslog@eq@no@star}}

\newcommand\tnslog@eq@no@star[1][]{%
    \if\relax\detokenize{#1}\relax%
    	=%
    \else%
        \tns@over@math@symbol{\txtdecoope{#1}}{=}%
    \fi%
}

\newcommand\tnslog@eq@star[1][]{%
    \if\relax\detokenize{#1}\relax%
    	=%
    \else%
        \IfEqCase{#1}{%
            {?}{\shorteq\mkern1.5mu\shorteq}%
            {appli}{\tnslog@leftleftharpoons}%
            {cons}{\tnslog@rightrightharpoons}%
            {def}{\coloneqq}%
            {id}{\tnslog@rightleftharpoons}%
        }[%
            \tns@over@math@symbol{\txtdecoope{#1}}{=}%
        ]%
    \fi%
}

\let\oldneq\neq
\renewcommand\neq{\@ifstar{\tnslog@neq@star}{\tnslog@neq@no@star}}

\newcommand\tnslog@neq@no@star[1][]{%
    \if\relax\detokenize{#1}\relax%
    	\oldneq%
    \else%
        \tns@over@math@symbol{\txtdecoope{#1}}{\oldneq}%
    \fi%
}

\newcommand\tnslog@neq@star[1][]{%
    \if\relax\detokenize{#1}\relax%
    	\oldneq%
    \else%
        \IfEqCase{#1}{%
            {?}{\shortless\mkern1.5mu\shortgtr}%
            {appli}{\centernot\tnslog@leftleftharpoons}%
            {cons}{\centernot\tnslog@rightrightharpoons}%
            {def}{\centernot\coloneqq}%
            {id}{\centernot\tnslog@rightleftharpoons}%
        }[%
            \tns@over@math@symbol{\txtdecoope{#1}}{\oldneq}%
        ]%
    \fi%
}

\newcommand\less{\@ifstar{\tnslog@less@star}{\tnslog@less@no@star}}

\newcommand\tnslog@less@no@star[1][]{%
    \if\relax\detokenize{#1}\relax%
    	<%
    \else%
        \tns@over@math@symbol{\txtdecoope{#1}}{<}%
    \fi%
}

\newcommand\tnslog@less@star[1][]{%
    \if\relax\detokenize{#1}\relax%
    	<%
    \else%
        \tns@over@math@symbol{\txtdecoope{#1}}{<}%
    \fi%
}

\let\oldnless\nless
\renewcommand\nless{\@ifstar{\tnslog@nless@star}{\tnslog@nless@no@star}}

\newcommand\tnslog@nless@no@star[1][]{%
    \if\relax\detokenize{#1}\relax%
    	\oldnless%
    \else%
        \tns@over@math@symbol{\txtdecoope{#1}}{\oldnless}%
    \fi%
}

\newcommand\tnslog@nless@star[1][]{%
    \if\relax\detokenize{#1}\relax%
    	\oldnless%
    \else%
        \tns@over@math@symbol{\txtdecoope{#1}}{\oldnless}%
    \fi%
}

\newcommand\gtr{\@ifstar{\tnslog@gtr@star}{\tnslog@gtr@no@star}}

\newcommand\tnslog@gtr@no@star[1][]{%
    \if\relax\detokenize{#1}\relax%
    	>%
    \else%
        \tns@over@math@symbol{\txtdecoope{#1}}{>}%
    \fi%
}

\newcommand\tnslog@gtr@star[1][]{%
    \if\relax\detokenize{#1}\relax%
    	>%
    \else%
        \tns@over@math@symbol{\txtdecoope{#1}}{>}%
    \fi%
}

\let\oldngtr\ngtr
\renewcommand\ngtr{\@ifstar{\tnslog@ngtr@star}{\tnslog@ngtr@no@star}}

\newcommand\tnslog@ngtr@no@star[1][]{%
    \if\relax\detokenize{#1}\relax%
    	\oldngtr%
    \else%
        \tns@over@math@symbol{\txtdecoope{#1}}{\oldngtr}%
    \fi%
}

\newcommand\tnslog@ngtr@star[1][]{%
    \if\relax\detokenize{#1}\relax%
    	\oldngtr%
    \else%
        \tns@over@math@symbol{\txtdecoope{#1}}{\oldngtr}%
    \fi%
}

\let\oldleq\leq
\renewcommand\leq{\@ifstar{\tnslog@leq@star}{\tnslog@leq@no@star}}

\newcommand\tnslog@leq@no@star[1][]{%
    \if\relax\detokenize{#1}\relax%
    	\oldleq%
    \else%
        \tns@over@math@symbol{\txtdecoope{#1}}{\oldleq}%
    \fi%
}

\newcommand\tnslog@leq@star[1][]{%
    \if\relax\detokenize{#1}\relax%
    	\oldleq%
    \else%
        \tns@over@math@symbol{\txtdecoope{#1}}{\oldleq}%
    \fi%
}

\let\oldnleq\nleq
\renewcommand\nleq{\@ifstar{\tnslog@nleq@star}{\tnslog@nleq@no@star}}

\newcommand\tnslog@nleq@no@star[1][]{%
    \if\relax\detokenize{#1}\relax%
    	\oldnleq%
    \else%
        \tns@over@math@symbol{\txtdecoope{#1}}{\oldnleq}%
    \fi%
}

\newcommand\tnslog@nleq@star[1][]{%
    \if\relax\detokenize{#1}\relax%
    	\oldnleq%
    \else%
        \tns@over@math@symbol{\txtdecoope{#1}}{\oldnleq}%
    \fi%
}

\let\oldgeq\geq
\renewcommand\geq{\@ifstar{\tnslog@geq@star}{\tnslog@geq@no@star}}

\newcommand\tnslog@geq@no@star[1][]{%
    \if\relax\detokenize{#1}\relax%
    	\oldgeq%
    \else%
        \tns@over@math@symbol{\txtdecoope{#1}}{\oldgeq}%
    \fi%
}

\newcommand\tnslog@geq@star[1][]{%
    \if\relax\detokenize{#1}\relax%
    	\oldgeq%
    \else%
        \tns@over@math@symbol{\txtdecoope{#1}}{\oldgeq}%
    \fi%
}

\let\oldngeq\ngeq
\renewcommand\ngeq{\@ifstar{\tnslog@ngeq@star}{\tnslog@ngeq@no@star}}

\newcommand\tnslog@ngeq@no@star[1][]{%
    \if\relax\detokenize{#1}\relax%
    	\oldngeq%
    \else%
        \tns@over@math@symbol{\txtdecoope{#1}}{\oldngeq}%
    \fi%
}

\newcommand\tnslog@ngeq@star[1][]{%
    \if\relax\detokenize{#1}\relax%
    	\oldngeq%
    \else%
        \tns@over@math@symbol{\txtdecoope{#1}}{\oldngeq}%
    \fi%
}

\let\oldiff\iff
\renewcommand\iff{\@ifstar{\tnslog@iff@star}{\tnslog@iff@no@star}}

\newcommand\tnslog@iff@no@star[1][]{%
    \if\relax\detokenize{#1}\relax%
    	\oldiff%
    \else%
        \tns@over@math@symbol{\txtdecoope{#1}}{\oldiff}%
    \fi%
}

\newcommand\tnslog@iff@star[1][]{%
    \if\relax\detokenize{#1}\relax%
    	\oldiff%
    \else%
        \tns@over@math@symbol{\txtdecoope{#1}}{\oldiff}%
    \fi%
}

\newcommand\niff{\@ifstar{\tnslog@niff@star}{\tnslog@niff@no@star}}

\newcommand\tnslog@niff@no@star[1][]{%
    \if\relax\detokenize{#1}\relax%
    	\centernot\iff%
    \else%
        \tns@over@math@symbol{\txtdecoope{#1}}{\centernot\iff}%
    \fi%
}

\newcommand\tnslog@niff@star[1][]{%
    \if\relax\detokenize{#1}\relax%
    	\centernot\iff%
    \else%
        \tns@over@math@symbol{\txtdecoope{#1}}{\centernot\iff}%
    \fi%
}

\let\oldimplies\implies
\renewcommand\implies{\@ifstar{\tnslog@implies@star}{\tnslog@implies@no@star}}

\newcommand\tnslog@implies@no@star[1][]{%
    \if\relax\detokenize{#1}\relax%
    	\oldimplies%
    \else%
        \tns@over@math@symbol{\txtdecoope{#1}}{\oldimplies}%
    \fi%
}

\newcommand\tnslog@implies@star[1][]{%
    \if\relax\detokenize{#1}\relax%
    	\oldimplies%
    \else%
        \tns@over@math@symbol{\txtdecoope{#1}}{\oldimplies}%
    \fi%
}

\newcommand\nimplies{\@ifstar{\tnslog@nimplies@star}{\tnslog@nimplies@no@star}}

\newcommand\tnslog@nimplies@no@star[1][]{%
    \if\relax\detokenize{#1}\relax%
    	\centernot\implies%
    \else%
        \tns@over@math@symbol{\txtdecoope{#1}}{\centernot\implies}%
    \fi%
}

\newcommand\tnslog@nimplies@star[1][]{%
    \if\relax\detokenize{#1}\relax%
    	\centernot\implies%
    \else%
        \tns@over@math@symbol{\txtdecoope{#1}}{\centernot\implies}%
    \fi%
}

\newcommand\becauseof{\@ifstar{\tnslog@becauseof@star}{\tnslog@becauseof@no@star}}

\newcommand\tnslog@becauseof@no@star[1][]{%
    \if\relax\detokenize{#1}\relax%
    	\mathrel{\Longleftarrow}%
    \else%
        \tns@over@math@symbol{\txtdecoope{#1}}{\mathrel{\Longleftarrow}}%
    \fi%
}

\newcommand\tnslog@becauseof@star[1][]{%
    \if\relax\detokenize{#1}\relax%
    	\mathrel{\Longleftarrow}%
    \else%
        \tns@over@math@symbol{\txtdecoope{#1}}{\mathrel{\Longleftarrow}}%
    \fi%
}

\newcommand\nbecauseof{\@ifstar{\tnslog@nbecauseof@star}{\tnslog@nbecauseof@no@star}}

\newcommand\tnslog@nbecauseof@no@star[1][]{%
    \if\relax\detokenize{#1}\relax%
    	\centernot\becauseof%
    \else%
        \tns@over@math@symbol{\txtdecoope{#1}}{\centernot\becauseof}%
    \fi%
}

\newcommand\tnslog@nbecauseof@star[1][]{%
    \if\relax\detokenize{#1}\relax%
    	\centernot\becauseof%
    \else%
        \tns@over@math@symbol{\txtdecoope{#1}}{\centernot\becauseof}%
    \fi%
}

% == Decorations - END == %


% ----------------- %
% -- QUANTIFIERS -- %
% ----------------- %

\newcommand\existsone{\exists\kern0.1em !}
\newcommand\nexistsone{\nexists\kern0.1em !}

\newcommand\existmulti[1]{\exists_{\kern0.1em #1}}
\newcommand\nexistmulti[1]{\nexists_{\kern0.1em #1}}


% -------------- %
% -- STEPCALC -- %
% -------------- %

% Space

\newcommand\expltxtspacein{2em}


% Common tools

\newcommand\explcom[1]{%
    \text{\color{purple}[\kern.225em{\footnotesize \itshape #1}\kern.3em]}%
}


\newcommand\explnext{\@ifstar{\tnslog@expl@next@star}{\tnslog@expl@next@no@star}}
\newcommand\tnslog@expl@next@no@star{}
\newcommand\tnslog@expl@next@star{}


\newcommand\tnslog@step@calc@ope{=}


\newcommand\comthis{\@ifstar{\tnslog@com@this@star}{\tnslog@com@this@no@star}}
\newcommand\tnslog@com@this@no@star{}

\newcommand\tnslog@com@this@star[1]{%
    \ifbool{tnslog@start@step@calc@arrow@}{%
        \PackageError{tnslog}{comment can't be use to start stepcalc[style = sar]}%
                             {No comment for the 1st part of stepcalc[style = sar]}
    }{%
        \kern\expltxtspacein\explcom{#1}%
    }%
}


\newcommand\tnslog@com@this@aligned[1]{%
    \global\booltrue{tnslog@com@this@no@star@used}%
    &%
    \tnslog@com@this@star{#1}%
}


\newcommand\tnslog@expl@next@extra@column{}


% Wrapper env with key-val options 

\setKVdefault[tnslog@step@calc@keys]{%
    ope   = {=},
    style = u,
    com   = nal
}


\newbool{tnslog@inside@step@calc@short@arrow@star@}


\newenvironment{stepcalc}[1][]{%
    \useKVdefault[tnslog@step@calc@keys]%
    \setKV[tnslog@step@calc@keys]{#1}%
    \def\style{\useKV[tnslog@step@calc@keys]{style}}%
% Comments
    \IfStrEq{\useKV[tnslog@step@calc@keys]{com}}{al}{%
        \renewcommand\tnslog@com@this@no@star\tnslog@com@this@aligned%
        \renewcommand\tnslog@expl@next@extra@column{&}
    }{%
        \renewcommand\tnslog@com@this@no@star\tnslog@com@this@star%
        \renewcommand\tnslog@expl@next@extra@column{}
    }%
    \IfEqCase{\style}{%
% University
        {u}{%
            \begin{tnslog@step@calc@university}%
            \global\boolfalse{tnslog@inside@step@calc@short@arrow@star@}%
        }%
% Arrows (long)
        {ar}{%
            \begin{tnslog@step@calc@arrow}%
            \global\boolfalse{tnslog@inside@step@calc@short@arrow@star@}%
        }%
% Arrows (long + operator in margin)
        {ar*}{%
            \begin{tnslog@step@calc@arrow}%
            \global\booltrue{tnslog@inside@step@calc@short@arrow@star@}%
        }%
% Arrows (short)
        {sar}{%
            \begin{tnslog@step@calc@short@arrow}%
            \global\boolfalse{tnslog@inside@step@calc@short@arrow@star@}%
        }%
    }[%
        \PackageError{tnslog}{unknown style}%
                             {You can use u (default), ar, ar* or sar.}%
    ]%
}{%
    \IfEqCase{\style}{%
% University
        {u}{%
            \end{tnslog@step@calc@university}%
        }%
% Arrows (long)
        {ar}{%
            \end{tnslog@step@calc@arrow}%
        }%
% Arrows (long + operator in margin)
        {ar*}{%
            \end{tnslog@step@calc@arrow}%
        }%
% Arrows (short)
        {sar}{%
            \end{tnslog@step@calc@short@arrow}%
        }%
    }%
}
    
    
% University version

% For the good extra lengths, see :
%    * https://tex.stackexchange.com/a/550837/6880

\newcommand\dimmax[2]{%
    \ifdim#1>#2 #1\else #2\fi
}

\newlength{\tnslog@upper@text@size}
\newlength{\tnslog@lower@text@size}

\newcommand\samesizeas[2]{%
    \settowidth\tnslog@upper@text@size{#1}%
    \settowidth\tnslog@lower@text@size{#2}%
    \makebox[\dimmax{\tnslog@upper@text@size}{\tnslog@lower@text@size}][c]{#1}%
}


\newcommand\expltxt[1]{%
    \text{\color{blue}\footnotesize \{\,{\itshape #1}\,\} }%
}

\newcommand\expltxtup[1]{%
    $\uparrow$ #1 $\uparrow$%
}

\newcommand\expltxtdown[1]{%
    $\downarrow$ #1 $\downarrow$%
}

\newcommand\expltxtupdown[2]{{%
    \displaystyle\footnotesize\color{blue}%
    \left\{\,%
        \genfrac{}{}{0pt}{}{%
            \text{\itshape\expltxtdown{\samesizeas{#1}{#2}}}%
        }{%
            \text{\itshape\expltxtup{\samesizeas{#2}{#1}}}%
        }%
    \,\right\}%
}}


\newcommand\tnslog@expl@next@university@no@star[2][\tnslog@step@calc@ope]{
    \\&
    {#1}
    \if\relax\detokenize{#2}\relax\else
        {} \kern\expltxtspacein \expltxt{#2}
    \fi
    \\&
}

\newcommand\tnslog@expl@next@university@separation{
    \\&
}


\newcommand\tnslog@expl@next@university@star[3][\tnslog@step@calc@ope]{
    \if\relax\detokenize{#2}\relax%
        \if\relax\detokenize{#3}\relax%
            \PackageError{tnslog}{two empty arguments}%
                                 {at least one none empty text is needed}%
        \fi%
    \fi%
    %
    \tnslog@expl@next@university@separation{}%
    \if\relax\detokenize{#2}\relax%
% Up empty
%     + Down none empty
        {#1}\kern\expltxtspacein%
        \expltxt{\expltxtup{\samesizeas{#3}{#2}}}%
    \else%
% Up none empty
%     + Down empty
        \if\relax\detokenize{#3}\relax%
            {#1}\kern\expltxtspacein{}%
            \expltxt{\expltxtdown{\samesizeas{#2}{#3}}}%
%     + Down none empty
        \else%
            {#1}\kern\expltxtspacein{}%
            \expltxtupdown{#2}{#3}%
        \fi%
    \fi%
    \tnslog@expl@next@extra@column{}
    \tnslog@expl@next@university@separation{}
}


\newenvironment{tnslog@step@calc@university}{
    \setlength{\abovedisplayskip}{0pt}%
    \setlength{\belowdisplayskip}{0pt}%
    \renewcommand\tnslog@step@calc@ope{\useKV[tnslog@step@calc@keys]{ope}}%
    \renewcommand\tnslog@expl@next@no@star\tnslog@expl@next@university@no@star%
    \renewcommand\tnslog@expl@next@star\tnslog@expl@next@university@star%
    \IfStrEq{\useKV[tnslog@step@calc@keys]{com}}{al}{%
        $\WithArrows[format = rll]
    }{%
        $\WithArrows[format = rl]
    }
            &
}{%
         \endWithArrows$
}


% Middle school version

\newcommand\tnslog@expl@next@middle@school@no@star[2][\tnslog@step@calc@ope]{%
    \ifbool{tnslog@com@this@no@star@used}{}{%
        \tnslog@expl@next@extra@column{}%
    }%
    \global\boolfalse{tnslog@com@this@no@star@used}%
    %
    %
    \ifbool{tnslog@inside@step@calc@short@arrow@}{%
        \ifbool{tnslog@start@step@calc@arrow@}{%
            \if\relax\detokenize{#2}\relax\else
                \PackageError{tnslog}{illegal argument to start stepcalc[style = sar]}%
                                     {no argument for the first use of explnext in stepcalc[style = sar]}%
            \fi%
            \global\boolfalse{tnslog@start@step@calc@arrow@}%
        }{
            \if\relax\detokenize{#2}\relax\else
                \Arrow[tikz = <->]{#2}
            \fi
            \\
        }
    }{
       \if\relax\detokenize{#2}\relax\else
            \Arrow[tikz = <->]{#2}
        \fi
        \\
    }%
    \ifbool{tnslog@inside@step@calc@short@arrow@star@}{%
	    \llap{$#1$}\;%
	}{%
		#1%
	}%
	&%
}

% Source
% https://tex.stackexchange.com/a/550754/6880

\NewDocumentCommand \@double@arrow@{O {} m m}{
    \Arrow[   tikz = -> , #1]{#2}%
    \Arrow[o, tikz = <- , #1]{#3}
}
 

\newcommand\tnslog@expl@next@middle@school@star[3][\tnslog@step@calc@ope]{
    \ifbool{tnslog@com@this@no@star@used}{}{%
        \tnslog@expl@next@extra@column{}%
    }%
    \global\boolfalse{tnslog@com@this@no@star@used}%
    %
    \if\relax\detokenize{#2}\relax%
        \if\relax\detokenize{#3}\relax%
            \PackageError{tnslog}{two empty arguments}%
                                 {at least one none empty text is needed}
        \else%
            \Arrow[tikz = <-]{#3}%
        \fi%
    \else%
        \if\relax\detokenize{#3}\relax%
            \Arrow[tikz = ->]{#2}%
        \else%
            \@double@arrow@{#2}{#3}
        \fi%
    \fi%
    \\
    \ifbool{tnslog@inside@step@calc@short@arrow@star@}{%
	    \llap{$#1$}\;%
	}{%
		#1%
	}%
	&%
}


\newbool{tnslog@start@step@calc@arrow@}

\newbool{tnslog@com@this@no@star@used}
\newbool{tnslog@inside@step@calc@short@arrow@}


\newenvironment{tnslog@step@calc@arrow}{
    \renewcommand\tnslog@expl@next@no@star\tnslog@expl@next@middle@school@no@star%
    \renewcommand\tnslog@expl@next@star\tnslog@expl@next@middle@school@star%
    \renewcommand\tnslog@step@calc@ope{\useKV[tnslog@step@calc@keys]{ope}}%
    %
    \boolfalse{tnslog@inside@step@calc@short@arrow@}%
    \boolfalse{tnslog@start@step@calc@arrow@}%
    \boolfalse{tnslog@com@this@no@star@used}%
    %
    \IfStrEq{\useKV[tnslog@step@calc@keys]{com}}{al}{%
        $\WithArrows[tikz = blue, groups, format = Rll]
    }{%
        $\WithArrows[tikz = blue, groups, format = Rl]
    }
            &
}{%
         \endWithArrows$
}

\newenvironment{tnslog@step@calc@short@arrow}{
    \renewcommand\tnslog@expl@next@no@star\tnslog@expl@next@middle@school@no@star%
    \renewcommand\tnslog@expl@next@star\tnslog@expl@next@middle@school@star%
    \renewcommand\tnslog@step@calc@ope{\useKV[tnslog@step@calc@keys]{ope}}%
    %
    \booltrue{tnslog@inside@step@calc@short@arrow@}%
    \booltrue{tnslog@start@step@calc@arrow@}%
    \boolfalse{tnslog@com@this@no@star@used}%
    %
    %
    \IfStrEq{\useKV[tnslog@step@calc@keys]{com}}{al}{%
        $\WithArrows[tikz = blue, groups, format = Rll]%
    }{%
        $\WithArrows[tikz = blue, groups, format = Rl]%
    }%
}{%
         \endWithArrows$
}


% ------------- %
% -- DEMOTAB -- %
% ------------- %

%    * Texts used

\newcommand\txtdemoID{Réf.}
\newcommand\txtdemoKNOWN{Je sais que...}
\newcommand\txtdemoPROP{Propriété ou fait utilisé}
\newcommand\txtdemoCONS{Conséquence}

\newcommand\txtdemoHYPS{Démonstration sous les hypothèses}
\newcommand\txtdemoHYP{Démonstration sous l'hypothèse}
\newcommand\txtdemoCCL{Conclusion}

\newcommand\txtdemoNEXTPAGE{Suite de la démo. page suivante...}


%    * Common tools

\newcommand\explref{\@ifstar{\tnslog@expl@ref@star}{\tnslog@expl@ref@no@star}}

\newcommand\tnslog@expl@ref@star[1]{%
    \framebox[1.5em]{#1}%
}

\newcommand\tnslog@expl@ref@no@star[1]{%
    \tnslog@expl@ref@star{\ref{#1}}%
}

\newcommand\demostep{}


%    * University version 

\newcounter{tnslog@demo@tab@id}


\newcommand\@expl@id[1]{%
    \framebox[1.5em]{\thetnslog@demo@tab@id}%
    \if\relax\detokenize{#1}\relax\else%
        \addtocounter{tnslog@demo@tab@id}{-1}%
        \refstepcounter{tnslog@demo@tab@id}\label{#1}
    \fi
    \stepcounter{tnslog@demo@tab@id}%
}


\newbool{tnslog@start@demo@tab} 


\newcommand\@demostep@no@star[1][]{%
    \ifbool{tnslog@start@demo@tab}{%
        \global\boolfalse{tnslog@start@demo@tab}%
    }{%
        \\
    }%
    \@expl@id{#1}
    &
}


\setKVdefault[tnslog@demo@tab@keys]{%
    start = 1,
    hyps  = {},
    hyp   = {},
    ccl   = {}
}


\newenvironment{demotab}[1][]{
    \renewcommand\demostep\@demostep@no@star
    \useKVdefault[tnslog@demo@tab@keys]
    \setKV[tnslog@demo@tab@keys]{#1}
    %
    \ifthenelse{\equal{\useKV[tnslog@demo@tab@keys]{start}}{last}}{
    % If no environment has been used before !
        \ifnum\value{tnslog@demo@tab@id}<1
            \setcounter{tnslog@demo@tab@id}{1}
        \fi
    }{%
        \setcounter{tnslog@demo@tab@id}{\useKV[tnslog@demo@tab@keys]{start}}%
    }%
    \def\hyps{\useKV[tnslog@demo@tab@keys]{hyps}}
    \def\hyp{\useKV[tnslog@demo@tab@keys]{hyp}}
    \edef\ccl{\useKV[tnslog@demo@tab@keys]{ccl}}
    %
    \if\relax\hyps\relax\else%
        \if\relax\hyp\relax\else%
            \PackageError{tnslog}{hyps and hyp are both used}%
                                 {use either hyps or hyp, or none of them}
        \fi
    \fi
    %
    \if\relax\hyps\relax\else%
        \underline{\txtdemoHYPS\vphantom{p\txtdemoCCL}} : \hyps
        \vspace{-.25em}
    \fi
    \if\relax\hyp\relax\else%
        \underline{\txtdemoHYP\vphantom{p\txtdemoCCL}} : \hyp
        \vspace{-.25em}
    \fi
    \booltrue{tnslog@start@demo@tab}
    \begin{longtable}{lll}
        \multicolumn{3}{c}{}
        \\[-.5em]
        \multicolumn{3}{c}{%
            \textit{\tnslog@demo@extra{\txtdemoNEXTPAGE}}%
        }
        \endfoot
        \endlastfoot
}{
    \end{longtable}
    \if\relax\ccl\relax\else%
        \vspace{-.25em}
        \underline{\txtdemoCCL\vphantom{\txtdemoHYPS}} : \ccl
    \fi
}


%    * Middle school version

\newbool{tnslog@start@demo@tab@star}

\newcounter{tnslog@demo@tab@star@id}


\newcommand\tnslog@demo@extra[1]{%
    {\footnotesize#1}%
}


\newcommand\tnslog@expl@star@id[1]{%
    \thetnslog@demo@tab@star@id%
    \if\relax\detokenize{#1}\relax\else%
        \addtocounter{tnslog@demo@tab@star@id}{-1}%
        \refstepcounter{tnslog@demo@tab@star@id}\label{#1}
    \fi
    \stepcounter{tnslog@demo@tab@star@id}%
}


\newcommand\tnslog@demostep@star[1][]{%
    \ifbool{tnslog@start@demo@tab@star}{%
        \global\boolfalse{tnslog@start@demo@tab@star}%
    }{%
        \\
        \hline%
    }%
    \tnslog@expl@star@id{#1}%
    &
}


\setKVdefault[tnslog@demo@tab@star@keys]{%
    start = 1
}


\newenvironment{demotab*}[1][]{
    \renewcommand\demostep\tnslog@demostep@star
    \useKVdefault[tnslog@demo@tab@star@keys]
    \setKV[tnslog@demo@tab@star@keys]{#1}
    %
    \ifthenelse{\equal{\useKV[tnslog@demo@tab@star@keys]{start}}{last}}{
    % If no environment has been used before !
        \ifnum\value{tnslog@demo@tab@star@id}<1
            \setcounter{tnslog@demo@tab@star@id}{1}
        \fi
    }{%
        \setcounter{tnslog@demo@tab@star@id}{\useKV[tnslog@demo@tab@star@keys]{start}}%
    }%
    \booltrue{tnslog@start@demo@tab@star}
    \small
    \renewcommand{\arraystretch}{1.5}
    \begin{longtable}{c|p{0.29\linewidth}|p{0.29\linewidth}|p{0.29\linewidth}}
        \textbf{\tnslog@demo@extra{\txtdemoID}}
            & \textbf{\tnslog@demo@extra{\txtdemoKNOWN}}
            & \textbf{\tnslog@demo@extra{\txtdemoPROP}}
            & \textbf{\tnslog@demo@extra{\txtdemoCONS}}
        \\ \hline
        \endfirsthead
        %
        \textbf{\tnslog@demo@extra{\txtdemoID}}
            & \textbf{\tnslog@demo@extra{\txtdemoKNOWN}}
            & \textbf{\tnslog@demo@extra{\txtdemoPROP}}
            & \textbf{\tnslog@demo@extra{\txtdemoCONS}}
        \\ \hline
        \endhead
        %
        \multicolumn{3}{c}{}
        \\[-1.25em]
        \multicolumn{4}{c}{%
            \textit{\tnslog@demo@extra{\txtdemoNEXTPAGE}}%
        }
        \\
        \endfoot

        \endlastfoot
}{
    \end{longtable}
    \renewcommand{\arraystretch}{1}
}


% ------------------ %
% -- POINT N LINE -- %
% ------------------ %

% Points

\newcommand\pt{\@ifstar{\tnsgeo@pt@star}{\tnsgeo@pt@no@star}}

\newcommand\tnsgeo@pt@no@star[1]{\mathrm{#1}}

\newcommand\tnsgeo@pt@star[2]{%
    \tnsgeo@pt@no@star{#1}_{#2}
}


% Lines

\newcommand\gline[3][O]{%
    \IfStrEqCase{#1}{%
        {O}{%
        	\def\leftdelim {\left(}%
        	\def\rightdelim{\right)}%
	    }%
        {C}{%
        	\def\leftdelim {\left[}%
        	\def\rightdelim{\right]}%
	    }%
        {OC}{%
        	\def\leftdelim {\left(}%
        	\def\rightdelim{\right]}%
	    }%
        {CO}{%
        	\def\leftdelim {\left[}%
        	\def\rightdelim{\right)}%
	    }%
	}[%
        \PackageError{tnsgeo}{unknown option}%
                             {you can use O (default) C, OC or CO.}%
	]
    \leftdelim{} #2 #3 \rightdelim{}%
}

\newcommand\gpline[3][O]{%
    \gline[#1]{\pt{#2}}{\pt{#3}}%
}


\newcommand\ghline[2]{%
    \gline[CO]{#1}{#2}%
}

\newcommand\gphline[2]{%
    \gpline[CO]{#1}{#2}%
}


\newcommand\segment[2]{%
    \gline[C]{#1}{#2}%
}

\newcommand\psegment[2]{%
    \gpline[C]{#1}{#2}%
}


% Source
%    * https://tex.stackexchange.com/questions/511495
\let\stdparallel\parallel
\renewcommand{\parallel}{\mathrel{/\mkern-5mu/}}

\let\stdnparallel\nparallel
\renewcommand{\nparallel}{%
  \mathrel{\mathpalette\tnsgeo@not@parallel\relax}%
}
\newcommand{\tnsgeo@not@parallel}[2]{%
  \ooalign{\reflectbox{$\m@th#1\smallsetminus$}\cr\hfil$\m@th#1\parallel$\cr}%
}


% ------------ %
% -- VECTOR -- %
% ------------ %

\newcommand\tnsgeo@no@point[1]{%
    \if#1i%
        \imath%
    \else%
        \if#1j%
            \jmath%
        \else%
            #1
        \fi%
    \fi%
}

\newcommand\vect{\@ifstar{\tnsgeo@vect@star}{\tnsgeo@vect@no@star}}

\newcommand*\tnsgeo@vect@star[1]{\vv*{\tnsgeo@no@point{#1}}}

\newcommand*\tnsgeo@vect@no@star[1]{\vv{\tnsgeo@no@point{#1}}}


\newcommand\pvect[2]{\vect{\pt{#1}\pt{#2}}}


% ----------------- %
% -- VECTOR NORM -- %
% ----------------- %

% Source :
%    * https://tex.stackexchange.com/a/43009/6880
%
\DeclarePairedDelimiter\norm{\lVert}{\rVert}%

\let\tnsgeo@old@norm\norm


\renewcommand\norm{\@ifstar{\tnsgeo@norm@star}{\tnsgeo@norm@no@star}}

\newcommand\tnsgeo@norm@star[1]{%
    \tnsgeo@old@norm{#1}%
}

\newcommand\tnsgeo@norm@no@star[1]{%
    \tnsgeo@old@norm*{#1}%
}


\newcommand\vnorm[1]{%
    \norm*{\vect{#1}}%
}


% --------------------- %
% -- VECTOR PRODUCTS -- %
% --------------------- %

% -- DOT PRODUCT -- %

%    #1 : 1st delimiter
%    #2 : 1st vector
%    #3 : inner separator
%    #4 : 2nd vector
%    #5 : 2nd delimiter

\newcommand\tnsgeo@dotprod@abstract@rafter[5]{%
    #1#2#3#4#5%
}


\newcommand\dotprod[3][u]{%
    \IfEqCase{#1}{%
% Usual
        {u}{%
            #2 \cdot #3%
        }%
% Bullet
        {b}{%
            #2 \mathbin{\text{\raisebox{.05em}{$\mathsmaller\symvar$}}} #3%
        }%
% Big parenthesis
        {p}{%
            \tnsgeo@dotprod@abstract@rafter{\left(\,}%
                                           {#2}
                                           {\,\left|\,\vphantom{#2}}%
                                           {#3}%
                                           {\right.\,\right)}%
        }%
% Small parenthesis
        {sp}{%
            \tnsgeo@dotprod@abstract@rafter{(\,}%
                                           {#2}%
                                           {\mid}%
                                           {#3}%
                                           {\,)}%
        }%
% Big raft
        {r}{%
            \tnsgeo@dotprod@abstract@rafter{\left\langle\,}%
                                           {#2}
                                           {\,\left|\,\vphantom{#2}}%
                                           {#3}%
                                           {\right.\,\right\rangle}%
        }%
% Small raft
        {sr}{%
            \tnsgeo@dotprod@abstract@rafter{\langle\,}%
                                           {#2}%
                                           {\mid}%
                                           {#3}%
                                           {\,\rangle}%
        }%
    }[%
        \PackageError{tnsgeo}{unknown option}%
                             {You can use u (default), p , sp , r or sr.}%
    ]%
}



\newcommand\vdotprod[3][u]{%
    \dotprod[#1]{\vect{#2}}{\vect{#3}}%
}


% The dot product - TO KEEP !!!!!!!

%    #1 : 1st vector
%    #2 : 2nd vector
%    #3 : operator for the products

%\newcommand\tnsgeo@dotprod@abstract@exp[3]{%
%    x_{#1} #3 x_{#2} + y_{#1} #3 y_{#2}%
%}



% -- CROSS PRODUCT - OPERATOR -- %

%    #1 : option for the operator
%    #2 : 1st vector
%    #3 : 2nd vector
\newcommand\crossprod[3][w]{%
    #2 %
    \IfEqCase{#1}{%
        {w}{\wedge}
        {t}{\times}
    }[%
        \PackageError{tnsgeo}{unknown option}%
                             {You can use w (default) or t.}%
    ]%
    #3
}

%    #1 : option for the operator
%    #2 : 1st vector
%    #3 : 2nd vector
\newcommand\vcrossprod[3][w]{%
    \crossprod[#1]{\vect{#2}}{\vect{#3}}%
}



% -- CROSS PRODUCT - CALCULATE -- %

% Coordinates given like that.
%
%    #1    #4
%    #2    #5
%    #3    #6
%
% #7 : symbol for the product.
%
% #8 : one of the macro \coord, \vcoord or \vcoord*.
%
% #9 : one of the the option p, sp, vp, b, sb or vb.

\newcommand\tnsgeo@apply@coord@crossprod[9]{%
    #8[#9]{%
    	\tns@prop@prod{#7}{#2}{#5}%
	                      {#3}{#6}
      | \tns@prop@prod{#7}{#3}{#6}%
	                      {#1}{#4}
      | \tns@prop@prod{#7}{#1}{#4}%
	                      {#2}{#5}
    }%
}


\newbool{tnsgeo@calc@crossprod@option@vec}   % Default.
\newbool{tnsgeo@calc@crossprod@option@novec}

\newbool{tnsgeo@calc@crossprod@option@loop}   % Default.
\newbool{tnsgeo@calc@crossprod@option@arrows}
\newbool{tnsgeo@calc@crossprod@option@cross}
\newbool{tnsgeo@calc@crossprod@option@nodeco}


\newbool{tnsgeo@calc@crossprod@option@p}   % Default if exp is used.
\newbool{tnsgeo@calc@crossprod@option@sp}
\newbool{tnsgeo@calc@crossprod@option@vp}

\newbool{tnsgeo@calc@crossprod@option@b}
\newbool{tnsgeo@calc@crossprod@option@sb}
\newbool{tnsgeo@calc@crossprod@option@vb}

\newbool{tnsgeo@calc@crossprod@option@exp}
\newbool{tnsgeo@calc@crossprod@option@cexp}
\newbool{tnsgeo@calc@crossprod@option@texp}


\newcommand\tnsgeo@validate@calc@crossprod@option[1]{
    \IfEqCase{#1}{%
        {vec}{\booltrue{tnsgeo@calc@crossprod@option@vec}}
        {novec}{\booltrue{tnsgeo@calc@crossprod@option@novec}}
        %
        {loop}{\booltrue{tnsgeo@calc@crossprod@option@loop}}
        {arrows}{\booltrue{tnsgeo@calc@crossprod@option@arrows}}
        {cross}{\booltrue{tnsgeo@calc@crossprod@option@cross}}
        {nodeco}{\booltrue{tnsgeo@calc@crossprod@option@nodeco}}
        %
        {exp}{\booltrue{tnsgeo@calc@crossprod@option@exp}}
        {cexp}{\booltrue{tnsgeo@calc@crossprod@option@cexp}}
        {texp}{\booltrue{tnsgeo@calc@crossprod@option@texp}}
        %
        {p}{\booltrue{tnsgeo@calc@crossprod@option@p}}
        {sp}{\booltrue{tnsgeo@calc@crossprod@option@sp}}
        {vp}{\booltrue{tnsgeo@calc@crossprod@option@vp}}
        %
        {b}{\booltrue{tnsgeo@calc@crossprod@option@b}}
        {sb}{\booltrue{tnsgeo@calc@crossprod@option@sb}}
        {vb}{\booltrue{tnsgeo@calc@crossprod@option@vb}}
    }[%
        \PackageError{tnsgeo}{unknown option}%
                             {You can use vec, novec, loop, arrows, cross, nodeco, exp, cexp, texp, p, sp, vp, b, sb or vb.}%
    ]
}


%   #1 : option for the formatting
%
%   #2  #6		u  v
%   
%   #3  #7		x  x'
%   #4  #8      y  y'
%   #5  #9      z  z'

\newcommand\calccrossprod[9][vec,loop]{%
    \boolfalse{tnsgeo@calc@crossprod@option@vec}
    \boolfalse{tnsgeo@calc@crossprod@option@novec}
    %
    \boolfalse{tnsgeo@calc@crossprod@option@loop}
    \boolfalse{tnsgeo@calc@crossprod@option@arrows}
    \boolfalse{tnsgeo@calc@crossprod@option@cross}
    \boolfalse{tnsgeo@calc@crossprod@option@nodeco}
    %
    \boolfalse{tnsgeo@calc@crossprod@option@exp}
    \boolfalse{tnsgeo@calc@crossprod@option@cexp}
    \boolfalse{tnsgeo@calc@crossprod@option@texp}
    %
    \boolfalse{tnsgeo@calc@crossprod@option@p}
    \boolfalse{tnsgeo@calc@crossprod@option@sp}
    \boolfalse{tnsgeo@calc@crossprod@option@vp}
    %
    \boolfalse{tnsgeo@calc@crossprod@option@b}
    \boolfalse{tnsgeo@calc@crossprod@option@sb}
    \boolfalse{tnsgeo@calc@crossprod@option@vb}
    %
    \DoWithCSL\tnsgeo@validate@calc@crossprod@option{#1}
    %
    \ifboolexpr{
		(
			bool{tnsgeo@calc@crossprod@option@exp}
			or
			bool{tnsgeo@calc@crossprod@option@cexp}
			or
			bool{tnsgeo@calc@crossprod@option@texp}
		)
		and
		(
			bool{tnsgeo@calc@crossprod@option@loop}
			or
			bool{tnsgeo@calc@crossprod@option@arrows}
			or
			bool{tnsgeo@calc@crossprod@option@cross}
			or
			bool{tnsgeo@calc@crossprod@option@nodeco}
		)
	}{%
        \PackageError{tnsgeo}{illegal use of options}%
                             {You can't use exp, cexp or texp with also loop, arrows, cross or nodeco.}%
	}{}%
    % Expansion
    \ifboolexpr{
		bool{tnsgeo@calc@crossprod@option@exp}
		or
		bool{tnsgeo@calc@crossprod@option@cexp}
		or
		bool{tnsgeo@calc@crossprod@option@texp}
	}{
    % Default values
        \def\coordoption{p}%
        \def\expsymbol{\,}%
    	%
        \ifbool{tnsgeo@calc@crossprod@option@sp}{%
            \def\coordoption{sp}%
        }{}%
        %
        \ifbool{tnsgeo@calc@crossprod@option@vp}{%
            \def\coordoption{vp}%
        }{}%
        %
        \ifbool{tnsgeo@calc@crossprod@option@b}{%
            \def\coordoption{b}%
        }{}%
        %
        \ifbool{tnsgeo@calc@crossprod@option@sb}{%
            \def\coordoption{sb}%
        }{}%
        %
        \ifbool{tnsgeo@calc@crossprod@option@vb}{%
            \def\coordoption{vb}%
        }{}%
        %
        \ifbool{tnsgeo@calc@crossprod@option@texp}{%
            \def\expsymbol{\times}%    
        }{}%
        %
        \ifbool{tnsgeo@calc@crossprod@option@cexp}{%
            \def\expsymbol{\cdot}%    
        }{}%
        %
        \tnsgeo@apply@coord@crossprod{#3}{#4}{#5}% Vector 1
                                     {#7}{#8}{#9}% Vector 2
                                     {\expsymbol}%
                                     {\coord}{\coordoption}%
	}{
    % No expansion
	    % Default values
	    \def\vecoption{vec}%
    	\def\tocall{\tns@cross@prod@deco@loop}%
        %
        \ifbool{tnsgeo@calc@crossprod@option@novec}{%
            \def\vecoption{novec}%
        }{}%
        %
        \ifbool{tnsgeo@calc@crossprod@option@arrows}{%
            \def\tocall{\tns@cross@prod@deco@arrows}%  
        }{}%
        %
        \ifbool{tnsgeo@calc@crossprod@option@cross}{%
            \def\tocall{\tns@cross@prod@deco@cross}%  
        }{}%
        %
        \ifbool{tnsgeo@calc@crossprod@option@nodeco}{%
            \def\tocall{\tns@cross@prod@no@deco}%  
        }{}%
        \tocall{\vecoption}%
               {#2}{#3}{#4}{#5}%
               {#6}{#7}{#8}{#9}%
	}
}


\newcommand\vcalccrossprod[9][vec,loop]{%
    \calccrossprod[#1]{\vect{#2}}{#3}{#4}{#5}%
                      {\vect{#6}}{#7}{#8}{#9}%
}


% ------------------- %
% -- VECTOR 2D DET -- %
% ------------------- %

% -- 2D DETERMINANT -- %

\newbool{tnsgeo@calc@detplane@option@vec}   % Default.
\newbool{tnsgeo@calc@detplane@option@novec}

\newbool{tnsgeo@calc@detplane@option@loop}   % Default.
\newbool{tnsgeo@calc@detplane@option@arrows}
\newbool{tnsgeo@calc@detplane@option@cross}
\newbool{tnsgeo@calc@detplane@option@nodeco}

\newbool{tnsgeo@calc@detplane@option@exp}   % Default.
\newbool{tnsgeo@calc@detplane@option@cexp}
\newbool{tnsgeo@calc@detplane@option@texp}


\newcommand\tnsgeo@validate@calc@detplane@option[1]{
    \IfEqCase{#1}{%
        {vec}{\booltrue{tnsgeo@calc@detplane@option@vec}}
        {novec}{\booltrue{tnsgeo@calc@detplane@option@novec}}
        %
        {loop}{\booltrue{tnsgeo@calc@detplane@option@loop}}
        {arrows}{\booltrue{tnsgeo@calc@detplane@option@arrows}}
        {cross}{\booltrue{tnsgeo@calc@detplane@option@cross}}
        {nodeco}{\booltrue{tnsgeo@calc@detplane@option@nodeco}}
        %
        {exp}{\booltrue{tnsgeo@calc@detplane@option@exp}}
        {cexp}{\booltrue{tnsgeo@calc@detplane@option@cexp}}
        {texp}{\booltrue{tnsgeo@calc@detplane@option@texp}}
    }[%
        \PackageError{tnsgeo}{unknown option}%
                             {You can use exp, cexp, texp, vec, novec, loop, arrows, cross or nodeco.}%
    ]%
}


%   #1 : option for the formatting
%
%   #2  #5		u  v
%   
%   #3  #6		x  x'
%   #4  #7      y  y'

\newcommand\calcdetplane[7][vec,loop]{%
    \boolfalse{tnsgeo@calc@detplane@option@vec}
    \boolfalse{tnsgeo@calc@detplane@option@novec}
    %
    \boolfalse{tnsgeo@calc@detplane@option@loop}
    \boolfalse{tnsgeo@calc@detplane@option@arrows}
    \boolfalse{tnsgeo@calc@detplane@option@cross}
    \boolfalse{tnsgeo@calc@detplane@option@nodeco}
    %
    \boolfalse{tnsgeo@calc@detplane@option@exp}
    \boolfalse{tnsgeo@calc@detplane@option@cexp}
    \boolfalse{tnsgeo@calc@detplane@option@texp}
    %
    \DoWithCSL\tnsgeo@validate@calc@detplane@option{#1}%
    %
    \ifboolexpr{
		(
			bool{tnsgeo@calc@detplane@option@exp}
			or
			bool{tnsgeo@calc@detplane@option@cexp}
			or
			bool{tnsgeo@calc@detplane@option@texp}
		)
		and
		(
			bool{tnsgeo@calc@detplane@option@loop}
			or
			bool{tnsgeo@calc@detplane@option@arrows}
			or
			bool{tnsgeo@calc@detplane@option@cross}
			or
			bool{tnsgeo@calc@detplane@option@nodeco}
		)
	}{%
        \PackageError{tnsgeo}{illegal use of options}%
                             {You can't use exp, cexp or texp with also loop, arrows, cross or nodeco.}%
	}{}%
    % Expansion
    \ifboolexpr{
		bool{tnsgeo@calc@detplane@option@exp}
		or
		bool{tnsgeo@calc@detplane@option@cexp}
		or
		bool{tnsgeo@calc@detplane@option@texp}
	}{
        \def\expsymbol{\,}%
        %
        \ifbool{tnsgeo@calc@detplane@option@cexp}{%
            \def\expsymbol{\cdot}%
        }{}%
        %
        \ifbool{tnsgeo@calc@detplane@option@texp}{%
            \def\expsymbol{\times}%
        }{}%
        %
        \tns@prop@prod{\expsymbol}%
                      {#3}{#4}%
                      {#6}{#7}%
	}{
    % No expansion
        % Default values
        \def\vecoption{vec}%
        \def\tocall{\tns@det@plane@deco@loop}%
        %
        \ifbool{tnsgeo@calc@detplane@option@novec}{%
            \def\vecoption{novec}%
        }{}%
        %
        \ifbool{tnsgeo@calc@detplane@option@arrows}{%
            \def\tocall{\tns@det@plane@deco@arrows}%  
        }{}%
        %
        \ifbool{tnsgeo@calc@detplane@option@cross}{%
            \def\tocall{\tns@det@plane@deco@cross}%  
        }{}%
        %
        \ifbool{tnsgeo@calc@detplane@option@nodeco}{%
            \def\tocall{\tns@det@plane@no@deco}%  
        }{}%
        %
        \tocall{\vecoption}%
               {#2}{#3}{#4}%
               {#5}{#6}{#7}%
	}
}


\newcommand\vcalcdetplane[7][vec,loop]{%
    \calcdetplane[#1]{\vect{#2}}{#3}{#4}%
                     {\vect{#5}}{#6}{#7}%
}


% --------------------------- %
% -- CARTESIAN COORDINATES -- %
% --------------------------- %

\newcommand\coord[2][p]{%
    \IfEqCase{#1}{%
        {p}{%
            \left( \,%
% ARG 1  = Separator: |
% ARG 2  = All parts: what the user types !
% ARG 3  = Before   : nothing here
% ARG 4  = Between  : ;
% ARG 5  = After    : nothing here
% OPTION = Ornament : macro to apply to each item
                 \tns@multi@wrap{|}{#2}{}{\tnsmathsep}{}%
             \, \right)%
        }{sp}{%
            (\tns@multi@wrap{|}{#2}{}{\tnsmathsep}{})%
        }{b}{%
            \left[ \,%
                 \tns@multi@wrap{|}{#2}{}{\tnsmathsep}{}%
             \, \right]%
        }{sb}{%
            [\tns@multi@wrap{|}{#2}{}{\tnsmathsep}{}]%
        }{vp}{%
            \tns@multi@wrap{|}{#2}{\begin{pmatrix}}{\\}{\end{pmatrix}}%
        }{vb}{%
            \tns@multi@wrap{|}{#2}{\begin{bNiceMatrix}}{\\}{\end{bNiceMatrix}}%
        }%
    }[
        \PackageError{ynsgeo}{unknown option}%
                             {You can use p (default), sp, b, sb, vp or vb.}
    ]%
}


\newcommand\tnsgeo@extra@coord[3][p]{%
    #2\coord[#1]{#3}%
}


\newcommand\pcoord{\@ifstar{\tnsgeo@extra@coord}{\tnsgeo@pcoord@no@star}}

\newcommand\tnsgeo@pcoord@no@star[3][p]{%
    \pt{#2}\coord[#1]{#3}%
}


\newcommand\vcoord{\@ifstar{\tnsgeo@extra@coord}{\tnsgeo@vcoord@no@star}}

\newcommand\tnsgeo@vcoord@no@star[3][p]{%
    \vect{#2}\coord[#1]{#3}%
}


% -------------------- %
% -- CARTESIAN AXES -- %
% -------------------- %

% Sources : see the sources of the macros for continued fractions.

% General naming of axes
\def\tnsgeo@axes@comafy@#1|#2\@nil{%
    \@ifmtarg{#2}{%
        #1%
    }{%
        #1 \tnsmathsubsep{} \tnsgeo@axes@comafy@#2\@nil%
    }%
}

\newcommand\axes{\@ifstar{\tnsgeo@axes@star}{\tnsgeo@axes@no@star}}

\newcommand\tnsgeo@axes@no@star[1]{%
    \tnsgeo@axes@no@star@splitter@#1|\@nil%
}
\def\tnsgeo@axes@no@star@splitter@#1|#2\@nil{%
    \ensuremath{\tns@generic@interval@ext{(}{#1}{\tnsmathsep{}}{\tnsgeo@axes@comafy@#2\@nil}{)}}%
}

\newcommand\tnsgeo@axes@star[1]{%
    \tnsgeo@axes@star@splitter@#1|\@nil%
}
\def\tnsgeo@axes@star@splitter@#1|#2\@nil{%
    \ensuremath{\tns@generic@interval@semi@ext{(}{#1}{\tnsmathsep{}}{\tnsgeo@axes@comafy@#2\@nil}{)}}%
}

% Geometric points for naming some axes
\def\tnsgeo@axes@comafy@gptify@#1|#2\@nil{%
    \@ifmtarg{#2}{%
        \pt{#1}%
    }{%
        \pt{#1} \tnsmathsubsep{} \tnsgeo@axes@comafy@gptify@#2\@nil%
    }%
}

\newcommand\paxes[1]{%
    \tnsgeo@paxes@splitter@#1|\@nil%
}
\def\tnsgeo@paxes@splitter@#1|#2\@nil{%
    \ensuremath{\tns@generic@interval@ext{(}{\pt{#1}}{\tnsmathsep{}}{\tnsgeo@axes@comafy@gptify@#2\@nil}{)}}%
}

% Vectors for naming some axes
\def\tnsgeo@axes@comafy@vectify@#1|#2\@nil{%
    \@ifmtarg{#2}{%
        \vect{\trim@spaces{#1}}%
    }{%
        \vect{\trim@spaces{#1}} \tnsmathsubsep{} \tnsgeo@axes@comafy@vectify@#2\@nil%
    }%
}

\newcommand\vaxes[1]{%
    \tnsgeo@vaxes@splitter@#1|\@nil%
}
\def\tnsgeo@vaxes@splitter@#1|#2\@nil{%
    \ensuremath{\tns@generic@interval@ext{(}{#1}{\tnsmathsep{}}{\tnsgeo@axes@comafy@vectify@#2\@nil}{)}}%
}

% Geometric points and vectors for naming some axes
\newcommand\pvaxes[1]{%
    \tnsgeo@pvaxes@splitter@#1|\@nil%
}
\def\tnsgeo@pvaxes@splitter@#1|#2\@nil{%
    \ensuremath{\tns@generic@interval@ext{(}{\pt{#1}}{\tnsmathsep{}}{\tnsgeo@axes@comafy@vectify@#2\@nil}{)}}%
}


% --------- %
% -- ARC -- %
% --------- %

% Pris dans le source de yhmath
\DeclareSymbolFont{yhlargesymbols}{OMX}{yhex}{m}{n}

%\DeclareMathAccent{\widetilde}{\mathord}{yhlargesymbols}{"65}
%\DeclareMathAccent{\widehat}{\mathord}{yhlargesymbols}{"62}
%\DeclareMathAccent{\widetriangle}{\mathord}{yhlargesymbols}{"E6}
\DeclareMathAccent{\wideparen}{\mathord}{yhlargesymbols}{"F3}

\newcommand\circarc{\@ifstar{\tnsgeo@circ@arc@star}{\tnsgeo@circ@arc@no@star}}

\newcommand*\tnsgeo@circ@arc@star[2]{%
    \wideparen{\tnsgeo@no@point{#1}}\vphantom{#1}_{#2}%
}

\newcommand*\tnsgeo@circ@arc@no@star[1]{%
    \wideparen{\tnsgeo@no@point{#1}}%
}


% --------------------- %
% -- ANGLE GEOMETRIC -- %
% --------------------- %

% Pris dans le source de yhmath
\DeclareSymbolFont{yhlargesymbols}{OMX}{yhex}{m}{n}

%\DeclareMathAccent{\widetilde}{\mathord}{yhlargesymbols}{"65}
\DeclareMathAccent{\widehat}{\mathord}{yhlargesymbols}{"62}
%\DeclareMathAccent{\widetriangle}{\mathord}{yhlargesymbols}{"E6}
\DeclareMathAccent{\wideparen}{\mathord}{yhlargesymbols}{"F3}


% Source : http://forum.mathematex.net/latex-f6/arc-dont-le-nom-comporte-un-indice-t12392.html#p120204

\newcommand\anglein{\@ifstar{\tnsgeo@anglein@star}{\tnsgeo@anglein@no@star}}

\newcommand*\tnsgeo@anglein@star[2]{%
    \widehat{\tnsgeo@no@point{#1}}\vphantom{#1}_{#2}%
}

\newcommand*\tnsgeo@anglein@no@star[1]{%
    \widehat{\tnsgeo@no@point{#1}}%
}


% -------------------- %
% -- ANGLE ORIENTED -- %
% -------------------- %

\newcommand\angleorient[3][p]{%
    \IfEqCase{#1}{%
% Big parenthesis (no hat)
        {p}{%
            \tns@generic@interval@ext{(}{\, #2}{\tnsmathsep}{#3\, }{)}%
        }%
% Small parenthesis (no hat)
        {sp}{%
            \tns@generic@interval@semi@ext{(}{\, #2}{\tnsmathsep}{#3\, }{)}%
        }%
% Hat - Big parenthesis
        {h}{%
            \widehat{\angleorient{#2}{#3}}%
        }%
% Hat - Small parenthesis
        {sh}{%
            \widehat{\angleorient[sp]{#2}{#3}}%
        }%
    }[%
        \PackageError{tnsgeo}{unknown option}%
                             {You can use p (default), sp, h or sh.}%
    ]%
}


\newcommand\vangleorient[3][p]{%
    \angleorient[#1]{\vect{#2}}{\vect{#3}}%
}


% --------------- %
% -- CONSTANTS -- %
% --------------- %

% Constants - START

% User's constants

\newcommand\param[1]{%
    \mathop{{}%
        \IfStrEqCase{#1}{%
            {gamma}{\upgamma}%
        {pi}{\uppi}%
        {tau}{\uptau}%
        }[\text{\textbf{#1}}]%
    }%
}

% Classical constants
    
\newcommand\ggamma{\param{gamma}}
\newcommand\ppi{\param{pi}}
\newcommand\ttau{\param{tau}}
\newcommand\ee{\param{e}}
\newcommand\ii{\param{i}}
\newcommand\jj{\param{j}}
\newcommand\kk{\param{k}}

% Constants - END


% ------------------ %
% -- ABS FUNCTION -- %
% ------------------ %

% Source :
%    * https://tex.stackexchange.com/a/43009/6880
%
\DeclarePairedDelimiter\abs{\lvert}{\rvert}%

\let\tnsana@old@abs\abs
\def\abs{\@ifstar{\tnsana@old@abs}{\tnsana@old@abs*}}


% --------------------- %
% -- NAMED FUNCTIONS -- %
% --------------------- %

% Classical functions - START

\DeclareMathOperator{\acos}{\operatorname{acos}}
\DeclareMathOperator{\asin}{\operatorname{asin}}
\DeclareMathOperator{\atan}{\operatorname{atan}}
\DeclareMathOperator{\arccosh}{\operatorname{arccosh}}
\DeclareMathOperator{\arcsinh}{\operatorname{arcsinh}}
\DeclareMathOperator{\arctanh}{\operatorname{arctanh}}
\DeclareMathOperator{\acosh}{\operatorname{acosh}}
\DeclareMathOperator{\asinh}{\operatorname{asinh}}
\DeclareMathOperator{\atanh}{\operatorname{atanh}}
\DeclareMathOperator{\fch}{\operatorname{ch}}
\DeclareMathOperator{\fsh}{\operatorname{sh}}
\DeclareMathOperator{\fth}{\operatorname{th}}
\DeclareMathOperator{\afch}{\operatorname{ach}}
\DeclareMathOperator{\afsh}{\operatorname{ash}}
\DeclareMathOperator{\afth}{\operatorname{ath}}

\let\stdexp\exp
\renewcommand\exp[1][]{%
    \stdexp%
    \if\relax\detokenize{#1}\relax\else%
        _{#1}%
    \fi%
}

\let\stdlg\lg
\renewcommand\lg[1][]{%
    \stdlg%
    \if\relax\detokenize{#1}\relax\else%
        _{#1}%
    \fi%
}

\let\stdln\ln
\renewcommand\ln[1][]{%
    \stdln%
    \if\relax\detokenize{#1}\relax\else%
        _{#1}%
    \fi%
}

\let\stdlog\log
\renewcommand\log[1][]{%
    \stdlog%
    \if\relax\detokenize{#1}\relax\else%
        _{#1}%
    \fi%
}

% Classical functions - END


% ----------- %
% -- LIMIT -- %
% ----------- %

% Note: some macros of the STY for total derivation are used here.

% Argument #1: parenthesis or not
% Argument #2: function
% Argument #3: variable
% Argument #4: multi-argument

\newcommand\tnsana@limit@abstract[4]{%
    \lim\limits_{%
		\scriptsize%
		\tns@multi@wrap{|}%
		               {#3\kern0.25ex{\rightarrow}\kern0.25ex#4}%
		               {\begin{NiceArray}{c}}%
		               {\\ }%
		               {\end{NiceArray}}%
	}#1{#2}%
}


% Argument #1: option s or sp
% Argument #2: function
% Argument #3: variable
% Argument #4: multi-argument

\newcommand\limit[4][asit]{%
    \IfEqCase{#1}{%
        {asit}{\let\parithere\tnsana@der@func@no@par}%
        {p}{\let\parithere\tnsana@der@func@ext@par}%
        {sp}{\let\parithere\tnsana@der@func@no@ext@par}%
    }[%
        \PackageError{tnsana}{unknown option}%
                             {you can use asit (default), p and sp}%
    ]%
    %
	\tnsana@limit@abstract{\parithere}{#2}{#3}{#4}%
}


% ------------------------- %
% -- TOTAL DIFF CALCULUS -- %
% ------------------------- %

% Sources :
%    * http://forum.mathematex.net/latex-f6/en-tete-de-ds-t12933.html#p124908
%    * http://forum.mathematex.net/latex-f6/derivee-avec-un-d-droit-et-espace-t12932.html#p124930
%    * http://forum.mathematex.net/latex-f6/remplacer-des-espaces-par-autre-chose-t12952.html#p125062
%    * http://forum.mathematex.net/latex-f6/probleme-de-remplacement-de-cdots-t13047.html#p125782
%    * https://tex.stackexchange.com/a/42445/6880
%    * https://tex.stackexchange.com/a/553843/6880


% dd, partial and pp useful operators
%
% Argument #1: the exponent
% Argument #2: the variable
% Argument #3: the operator
% Argument #4: space before exponent
% Argument #5: space after exponent

\newcommand{\tnsana@diff@ope}[5]{%
    #3%
    \ifx0#1\else%
        ^{\kern#4#1\kern#5}\!%
    \fi%
    \hspace{0.07em}#2%
}


\DeclareRobustCommand\@dder{
    \mathop{}\mathopen{}\mathrm{d}
}


\newcommand\dd[2][0]{\tnsana@diff@ope{#1}{#2}{\@dder}{.05ex}{0.15ex}}


\let\tnsana@original@partial\partial

\renewcommand{\partial}{%
    \tnsana@original@partial\mathopen{}%
}


\newcommand\pp[2][0]{\tnsana@diff@ope{#1}{#2}{\partial}{.15ex}{0.15ex}}


% Common tools

\newcounter{tnsana@der@prime@counter}

\newcommand\tnsana@der@func@no@par[1]{%
    #1%
}

\newcommand\tnsana@der@func@ext@par[1]{%
    \left( #1 \right)%
}

\newcommand\tnsana@der@func@no@ext@par[1]{%
    ( #1 )%
}

\newcommand\tnsana@der@func@under@bracket[1]{%
    \overbracket[.75pt]{#1}%
}


\newbool{tnsana@der@option@u}
\newbool{tnsana@der@option@e}
\newbool{tnsana@der@option@d}
\newbool{tnsana@der@option@bd}

\newbool{tnsana@der@option@i}
\newbool{tnsana@der@option@ei}

\newbool{tnsana@der@option@f}
\newbool{tnsana@der@option@of}
\newbool{tnsana@der@option@sf}
\newbool{tnsana@der@option@osf}

\newbool{tnsana@der@option@p}
\newbool{tnsana@der@option@sp}


% Total derivate

%     + Abstraction
%
%    #1 : macro applied to the function
%    #2 : the function
%    #3 : order of derivation

\newcommand\tnsana@der@usual[3]{%
    #1{#2}^{%
        \,%
        \forloop[1]{tnsana@der@prime@counter}{0}{\value{tnsana@der@prime@counter} < #3}{%
            \prime%
        }%
    }%
}


\newcommand\tnsana@der@exp[3]{%
    #1{#2}^{\left( #3 \right)}%
}


\newcommand\tnsana@der@dot[3]{%
    \mathop{%
        \kern\z@{#1{#2}}%
    }\limits^{%
        \vbox to-1.4\ex@{%
            \kern-\tw@\ex@%
            \hbox{\normalfont%
                %
                \forloop[1]{tnsana@der@prime@counter}{0}{\value{tnsana@der@prime@counter} < #3}{%
                    .%
                }%
            }%
            \vss%
        }%
    }%
}


\newcommand\tnsana@der@bracket@dot[3]{%
    \tnsana@der@dot{\tnsana@der@func@under@bracket}{#1{#2}}{#3}%
}



\newcommand\tnsana@der@sub[3]{
    \@dder%
    \IfStrEq{#3}{1}{}{%
        ^{\kern.15ex#3\kern.15ex}%
    }%
    _{\kern.15ex#2\kern.15ex} #1%
}


%    #1 : \frac or \dfrac 
%    #2 : the function
%    #3 : the variable
%    #4 : order of derivation

\newcommand\tnsana@der@abstract@frac[4]{%
    #1{%
        \IfStrEq{#4}{1}{%
            \dd{#2}%
        }{%
            \dd[#4]{#2}%
        }%
    }{%
        {%
            \dd{#3}%
            \IfStrEq{#4}{1}{}{%
                ^{#4}%
            }%
        }%
    }%
}


%    #1 : the function
%    #2 : the variable
%    #3 : order of derivation

\newcommand\tnsana@der@dfrac[3]{%
    \tnsana@der@abstract@frac{\dfrac}{#1}{#2}{#3}%
}


\newcommand\tnsana@der@frac[3]{
    \tnsana@der@abstract@frac{\frac}{#1}{#2}{#3}%
}


\newcommand\tnsana@der@ope@frac[3]{
    \tnsana@der@abstract@frac{\frac}{}{#2}{#3}#1%
}


\newcommand\tnsana@der@ope@dfrac[3]{
    \tnsana@der@abstract@frac{\dfrac}{}{#2}{#3}#1%
}


%     + Simple version (no var. of derivation)

\newcommand\tnsana@validate@simple@der@option[1]{
    \IfEqCase{#1}{%
        {u}{\booltrue{tnsana@der@option@u}}%
        {e}{\booltrue{tnsana@der@option@e}}%
        {d}{\booltrue{tnsana@der@option@d}}%
        {bd}{\booltrue{tnsana@der@option@bd}}%
        {p}{\booltrue{tnsana@der@option@p}}%
        {sp}{\booltrue{tnsana@der@option@sp}}%
    }[%
        \PackageError{tnsana}{unknown option}%
                             {you can use u (default), e , t , d , bd , p and sp}%
    ]%
}


%    #1 : option of formating
%    #2 : the  function (no var. here)
%    #3 : order of derivation

\newcommand\sder[3][u]{%
    \boolfalse{tnsana@der@option@u}%
    \boolfalse{tnsana@der@option@e}%
    \boolfalse{tnsana@der@option@d}%
    \boolfalse{tnsana@der@option@bd}%
    \boolfalse{tnsana@der@option@p}%
    \boolfalse{tnsana@der@option@sp}%
    %
    \DoWithCSL\tnsana@validate@simple@der@option{#1}
    %
    \ifboolexpr{
        not(
            bool {tnsana@der@option@e}
            or
            bool {tnsana@der@option@d}
            or
            bool {tnsana@der@option@bd}
        )
    }{%
        \booltrue{tnsana@der@option@u}%
    }{}%   
    %
    \ifbool{tnsana@der@option@p}{%
    	\let\parithere\tnsana@der@func@ext@par%
    }{%
        \ifbool{tnsana@der@option@sp}{%
    		\let\parithere\tnsana@der@func@no@ext@par%
        }{%
            \let\parithere\tnsana@der@func@no@par%
        }%
    }%
    %
    \ifbool{tnsana@der@option@u}{%
        \let\callithere\tnsana@der@usual%
    }{%
        \ifbool{tnsana@der@option@e}{%
            \let\callithere\tnsana@der@exp%
        }{%
        	\ifbool{tnsana@der@option@d}{%
            	\let\callithere\tnsana@der@dot%
			}{%
				\let\callithere\tnsana@der@bracket@dot%
			}%
        }%
    }%
    \callithere{\parithere}{#2}{#3}%
}


%     + Strict version (this one needs the var. of derivation)

\newcommand\tnsana@validate@der@option[1]{
    \IfEqCase{#1}{%
        {u}{\booltrue{tnsana@der@option@u}}%
        {e}{\booltrue{tnsana@der@option@e}}%
        {d}{\booltrue{tnsana@der@option@d}}%
        {bd}{\booltrue{tnsana@der@option@bd}}%
        {i}{\booltrue{tnsana@der@option@i}}%
        {f}{\booltrue{tnsana@der@option@f}}%
        {of}{\booltrue{tnsana@der@option@of}}%
        {sf}{\booltrue{tnsana@der@option@sf}}%
        {osf}{\booltrue{tnsana@der@option@osf}}%
        {p}{\booltrue{tnsana@der@option@p}}%
        {sp}{\booltrue{tnsana@der@option@sp}}%
    }[%
        \PackageError{tnsana}{unknown option}%
                             {you can use u (default), e , i , f , sf , oi , of , osf , p and sp}%
    ]%
}


\newcommand\der[4][u]{%
    \boolfalse{tnsana@der@option@u}%
    \boolfalse{tnsana@der@option@e}%
    \boolfalse{tnsana@der@option@d}%
    \boolfalse{tnsana@der@option@bd}%
    \boolfalse{tnsana@der@option@i}%
    \boolfalse{tnsana@der@option@f}%
    \boolfalse{tnsana@der@option@of}%
    \boolfalse{tnsana@der@option@sf}%
    \boolfalse{tnsana@der@option@osf}%
    \boolfalse{tnsana@der@option@p}%
    \boolfalse{tnsana@der@option@sp}%
    %
    \DoWithCSL\tnsana@validate@der@option{#1}
    %
    \ifboolexpr{
        not(
            bool {tnsana@der@option@e}
            or
            bool {tnsana@der@option@d}
            or
            bool {tnsana@der@option@bd}
            or
            bool {tnsana@der@option@i}
            or
            bool {tnsana@der@option@f}
            or
            bool {tnsana@der@option@of}
            or
            bool {tnsana@der@option@sf}
            or
            bool {tnsana@der@option@osf}
        )
    }{%
        \booltrue{tnsana@der@option@u}%
    }{}
    % Usual, exponent or dot
    \ifboolexpr{
        bool {tnsana@der@option@u}
        or
        bool {tnsana@der@option@e}
        or
        bool {tnsana@der@option@d}
        or
        bool {tnsana@der@option@bd}
    }{%
        \sder[#1]{#2}{#4}
    }{%    
    % Indice or fraction like
        \ifbool{tnsana@der@option@p}{%
                \let\parithere\tnsana@der@func@ext@par%
        }{%
            \ifbool{tnsana@der@option@sp}{%
                \let\parithere\tnsana@der@func@no@ext@par%
            }{%
                \let\parithere\tnsana@der@func@no@par%
            }%
        }%
     % Big frac
        \ifbool{tnsana@der@option@f}{%
            \let\callithere\tnsana@der@dfrac%
     % Small frac
        }{%
            \ifbool{tnsana@der@option@sf}{%
                \let\callithere\tnsana@der@frac%
     % Indice
            }{%
                \ifbool{tnsana@der@option@i}{%
                    \let\callithere\tnsana@der@sub%
    % Big frac ope
                }{
                    \ifbool{tnsana@der@option@of}{%
                        \let\callithere\tnsana@der@ope@dfrac%
                    }{
    % Small frac ope
                        \ifbool{tnsana@der@option@osf}{%
                            \let\callithere\tnsana@der@ope@frac%
                        }{}%
                    }%
                }%
             }%
        }%
    % Let's do the job
        \callithere{\parithere{#2}}{#3}{#4}%
    }%
}


%     + Operator for total derivations

\newcommand\tnsana@validate@der@operator@option[1]{
    \IfEqCase{#1}{%
        {f}{\booltrue{tnsana@der@option@f}}%
        {sf}{\booltrue{tnsana@der@option@sf}}%
        {i}{\booltrue{tnsana@der@option@i}}%
    }[%
        \PackageError{tnsana}{unknown option}%
                             {you can use f (default), sf and i}%
    ]%
}


\newcommand\derope[3][f]{%
    \boolfalse{tnsana@der@option@f}%
    \boolfalse{tnsana@der@option@sf}%
    \boolfalse{tnsana@der@option@i}%
    %
    \DoWithCSL\tnsana@validate@der@operator@option{#1}
    %
    \ifbool{tnsana@der@option@sf}{}{%
        \ifbool{tnsana@der@option@i}{}{%
            \booltrue{tnsana@der@option@f}%
        }%
    }%
    \der[#1]{}{#2}{#3}%
}


% --------------------------- %
% -- PARTIAL DIFF CALCULUS -- %
% --------------------------- %

% Partial derivate

%     + Abstraction

\newcommand\tnsana@pder@abstract@frac[4]{%
    #1{%
        \pp[#4]{#2}%
    }{%
% ARG 1 = Separator: |
% ARG 2 = All parts: what the user types !
% ARG 3 = Before   : nothing here
% ARG 4 = Between  : ;
% ARG 5 = After    : nothing here
        \tns@multi@wrap{|}{#3}{\partial}{\,\partial}{}%
    }
}

\newcommand\tnsana@pder@dfrac[3]{%
    \tnsana@pder@abstract@frac{\dfrac}{#1}{#2}{#3}%
}

\newcommand\tnsana@pder@frac[3]{%
    \tnsana@pder@abstract@frac{\frac}{#1}{#2}{#3}%
}

\newcommand\tnsana@pder@ope@dfrac[3]{%
    \tnsana@pder@abstract@frac{\dfrac}{}{#2}{#3}#1%
}

\newcommand\tnsana@pder@ope@frac[3]{%
    \tnsana@pder@abstract@frac{\frac}{}{#2}{#3}#1%
}



\newcommand\tnsana@pder@sub[3]{
% The following command works because xstring traits {...} like a single character.
    \noexpandarg%
    \StrSubstitute{#2}{^}{\tnsana@der@func@no@ext@par}[\@index]%
    \partial%
    ^{\kern.15ex#3\kern.15ex}%
    _{\expandafter\StrSubstitute\expandafter{\@index}{|}{\kern.05em,\kern.05em}}%
    #1%
    \expandarg%
}



\newcommand\tnsana@pder@exp@sub[3]{%
	#1^{\,\prime}_{\kern.25ex\tnsana@pder@multi@expansion{#2}}%
}


\newcommand\tnsana@pder@multi@expansion[1]{%
	\tnsana@pder@multi@split#1|\nil%
}

\def\tnsana@pder@multi@split#1|#2\nil{%
	\tnsana@pder@expand@var#1^\nil%
	\if\relax\detokenize{#2}\relax\else%
		\,\tnsana@pder@multi@split#2\nil%
	\fi%
}

\def\tnsana@pder@expand@var#1^#2\nil{%
	#1%
	\if\relax\detokenize{#2}\relax\else%
		\tnsana@pder@repeat@var{#1}{\tnsana@pder@extract@expo#2\nil}%
	\fi%
}

\def\tnsana@pder@extract@expo#1^\nil{%
	#1%
}

\newcounter{tnsana@pder@exp@sub} 

\newcommand\tnsana@pder@repeat@var[2]{%
	\forloop{tnsana@pder@exp@sub}%
	        {1}{\value{tnsana@pder@exp@sub} < #2}%
	        {\,#1}%
}



%     + With the function given

\newcommand\tnsana@validate@pder@option[1]{
    \IfEqCase{#1}{%
        {i}{\booltrue{tnsana@der@option@i}}%
        {ei}{\booltrue{tnsana@der@option@ei}}%
        {f}{\booltrue{tnsana@der@option@f}}%
        {of}{\booltrue{tnsana@der@option@of}}%
        {sf}{\booltrue{tnsana@der@option@sf}}%
        {osf}{\booltrue{tnsana@der@option@osf}}%
        {p}{\booltrue{tnsana@der@option@p}}%
        {sp}{\booltrue{tnsana@der@option@sp}}%
    }[%
        \PackageError{tnsana}{unknown option}%
                             {you can use f (default), sf, of, osf, i, ei, p and sp}%
    ]%
}


\newcommand\pder[4][f]{%
    \boolfalse{tnsana@der@option@i}%
    \boolfalse{tnsana@der@option@ei}%
    \boolfalse{tnsana@der@option@f}%
    \boolfalse{tnsana@der@option@of}%
    \boolfalse{tnsana@der@option@sf}%
    \boolfalse{tnsana@der@option@osf}%
    \boolfalse{tnsana@der@option@p}%
    \boolfalse{tnsana@der@option@sp}%
    %
    \DoWithCSL\tnsana@validate@pder@option{#1}
    %
    %
    \ifboolexpr{
        not(
            bool {tnsana@der@option@of}
            or
            bool {tnsana@der@option@sf}
            or
            bool {tnsana@der@option@osf}
            or
            bool {tnsana@der@option@i}
            or
            bool {tnsana@der@option@ei}
        )
    }{%
        \booltrue{tnsana@der@option@f}%
    }{}%
    % Parentheses or not
    \ifbool{tnsana@der@option@p}{%
        \let\parithere\tnsana@der@func@ext@par%
    }{%
        \ifbool{tnsana@der@option@sp}{%
            \let\parithere\tnsana@der@func@no@ext@par%
        }{%
            \let\parithere\tnsana@der@func@no@par%
        }%
    }%
    % Expo total
    \IfStrEq{#4}{1}{%
        \def\expotot{}
    }{%
        \def\expotot{#4}
    }%
    % Big frac
    \ifbool{tnsana@der@option@f}{%
        \let\callithere\tnsana@pder@dfrac%
    }{%
    % Big frac ope
        \ifbool{tnsana@der@option@of}{%
            \let\callithere\tnsana@pder@ope@dfrac%
        }{%
    % Small frac
            \ifbool{tnsana@der@option@sf}{%
                \let\callithere\tnsana@pder@frac%
            }{%
    % Small frac ope
                \ifbool{tnsana@der@option@osf}{%
                    \let\callithere\tnsana@pder@ope@frac%
                }{%
    % Indice
                    \ifbool{tnsana@der@option@i}{%
                        \let\callithere\tnsana@pder@sub%
                    }{%
                    	\let\callithere\tnsana@pder@exp@sub%
                    }%
                }%
            }%
        }%
    }%
    % Let's do the job
    \callithere{\parithere{#2}}{#3}{\expotot}%
}



%     + Operator for partiaal derivations

\newcommand\pderope[3][f]{%
    \boolfalse{tnsana@der@option@f}%
    \boolfalse{tnsana@der@option@sf}%
    \boolfalse{tnsana@der@option@i}%
    %
    \DoWithCSL\tnsana@validate@der@operator@option{#1}
    %
    \ifbool{tnsana@der@option@sf}{}{%
        \ifbool{tnsana@der@option@i}{}{%
            \booltrue{tnsana@der@option@f}%
        }%
    }%
    \pder[#1]{}{#2}{#3}%
}


% ------------ %
% -- TABLES -- %
% ------------ %

% Better style for arrowhead !

\tkzTabSetup[%
    arrowstyle     = triangle 60,%
    doubledistance = 3pt%
]


% Graph Sign to decorate tkzTables.
%
% Sources
%    + https://tex.stackexchange.com/a/549546/6880
%    + https://groups.google.com/forum/#!topic/fr.comp.text.tex/X6aIq-SZDFA
%    + https://tex.stackexchange.com/a/91424/6880
%    + https://tex.stackexchange.com/a/159132/6880

% Single highlight a line
%
%    #1 : color
%    #2 : nb of the line
\newcommand\tnsana@back@line[2]{
    \begin{scope}[on background layer]
        \path [fill=#1] (T0#2) rectangle (T2\the\numexpr#2+1\relax);
    \end{scope}
}  

% Highlight a line
%
%    #1 : color
%    #2 : nb of the line

\ExplSyntaxOn
    \NewDocumentCommand\backLine{O{gray!30}m}{
        \clist_map_inline:nn{#2}{\tnsana@back@line{#1}{##1}}
    }
\ExplSyntaxOff


% For comments and graphs

\newcommand\@tkzdeco@node@middle[1]{
    \coordinate (M) at ($(T2#1)!.5!(T2\the\numexpr#1+1\relax)$)
}

% Comment a line
%
%    #1 : color
%    #2 : nb of the line
%    #3 : text
\newcommand\comLine[3][blue]{
    \@tkzdeco@node@middle{#2};
    \path
        (M.east) + (.6,0) node[right, #1]{\footnotesize#3}
    ;
}


% Options : gso = graphtnsana@sign@option

\newcounter{tnsana@gso@nb@functions}
\newcommand\tnsana@gso@function{}

\newcounter{tnsana@gso@nb@a@constraints}
\newcommand\tnsana@gso@a@constraints{}

\newcounter{tnsana@gso@nb@d@constraints}
\newcommand\tnsana@gso@d@constraints{}


\newcommand\tnsana@validate@graphtnsana@sign@option[1]{%
    % Parameter a
    \IfSubStr{an,ap}{#1}{%
        \stepcounter{tnsana@gso@nb@a@constraints}%
        \renewcommand\tnsana@gso@a@constraints{@#1}%
    }{%
    % Parameter d
        \IfSubStr{dn,dp,dz}{#1}{%
            \stepcounter{tnsana@gso@nb@d@constraints}%
            \renewcommand\tnsana@gso@d@constraints{@#1}%
        }{%
    % Functions with parameters
            \IfEqCase{#1}{%
                {ax+b}{%
                    \renewcommand\tnsana@gso@function{line}%
                }%
                {ax2+bx+c}{%
                    \renewcommand\tnsana@gso@function{parabola}%
                }%
                {x2}{%
                    \renewcommand\tnsana@gso@function{square}%
                }%
                {sqrt}{%
                    \renewcommand\tnsana@gso@function{sqrt}%
                }%
                {1/x}{%
                    \renewcommand\tnsana@gso@function{inv}%
                }%
                {abs}{%
                    \renewcommand\tnsana@gso@function{abs}%
                }%
                {exp}{%
                    \renewcommand\tnsana@gso@function{exp}%
                }%
                {ln}{%
                    \renewcommand\tnsana@gso@function{ln}%
                }%
            }[%
                \PackageError{tnsana}{unknown option for graphSign}%
                                     {Illegal option given for graphSign : #1 .}%
            ]%
            \stepcounter{tnsana@gso@nb@functions}%
        }% END OF ELSE for parameter d 
    }% END OF ELSE for parameter a 
}


%    #1 : color
%    #2 : nb of the line
%    #3 : kind of graph
\newcommand\graphSign[3][blue]{%
    \renewcommand\tnsana@gso@function{}
    \renewcommand\tnsana@gso@a@constraints{}
    \renewcommand\tnsana@gso@d@constraints{}
    % Processing the options
    \setcounter{tnsana@gso@nb@functions}{0}
    \setcounter{tnsana@gso@nb@a@constraints}{0}
    \setcounter{tnsana@gso@nb@d@constraints}{0}
    %
    \DoWithCSL\tnsana@validate@graphtnsana@sign@option{#3}
    % Only one kind of function ?
    \ifnum\value{tnsana@gso@nb@functions}=1\else%
        \PackageError{tnsana}{only one kind of function can be given graphSign}%
                             {Number of kinds of function given to graphSign = \thetnsana@gso@nb@functions. This is illegal !}%
    \fi%
    % Line need only one constraint for a.
    \IfStrEq{\tnsana@gso@function}{line}{%
        \ifnum\value{tnsana@gso@nb@d@constraints}=0\else%
            \PackageError{tnsana}{constraints for d with lines are nonsense for graphSign}%
                                 {Lines for graphSign need only one constraint for a.}%
        \fi%
        %
        \ifnum\value{tnsana@gso@nb@a@constraints}=1\else%
            \PackageError{tnsana}{one single constraint for a with lines is needed for graphSign}%
                                 {Number of constraints for a given to graphSign = \thetnsana@gso@nb@a@constraints. This is illegal !}%
        \fi%
    }{%
    % Parabola need only one constraint for a and also one for d.
        \IfStrEq{\tnsana@gso@function}{parabola}{%
            \ifnum\value{tnsana@gso@nb@d@constraints}=1\else%
                \PackageError{tnsana}{one single constraint for d with parabolas is needed for graphSign}%
                                     {Number of constraints for d given to graphSign = \thetnsana@gso@nb@a@constraints. This is illegal !}%
            \fi%
            %
            \ifnum\value{tnsana@gso@nb@a@constraints}=1\else%
                \PackageError{tnsana}{one single constraint for a with lines is needed for graphSign}%
                                     {Number of constraints for a given to graphSign = \thetnsana@gso@nb@a@constraints. This is illegal !}%
            \fi%
        %
        }{%
    % No constraint for reference function
            \ifnum\value{tnsana@gso@nb@a@constraints}=0\else%
                \PackageError{tnsana}{one constraint for a with reference function are nonsense for graphSign}%
                                     {Reference functions for graphSign don't need any constraint.}%
            \fi%
            \ifnum\value{tnsana@gso@nb@d@constraints}=0\else%
                \PackageError{tnsana}{one constraint for d with reference function are nonsense for graphSign}%
                                     {Reference functions for graphSign don't need any constraint.}%
            \fi%
        }%
    }%
    % Call of the good function
    \csname  tnsana@sign@\tnsana@gso@function\tnsana@gso@a@constraints\tnsana@gso@d@constraints\endcsname{#1}{#2}
    % Looking for invalid options 
    % Everything is ok.
}



% AXES
%
%    #1 : color
%    #2 : start
%    #3 : end

\newcommand\tnsana@abstract@axes[3]{
	\draw[->, -Latex, #1] (#2) --+ (#3);
}


% LINES
%
% ax+b , ap  -->  \tnsana@sign@line@ap
% ax+b , an  -->  \tnsana@sign@line@an


% Abstraction for the lines
%
%    #1 : color
%    #2 : nb of the line
%    #3 : the root
%    #4 : 1st ordinate
%    #5 : 2nd ordinate
%    #6 : 1st sign
%    #7 : 2nd sign
%    #8 : 1st shifts
%    #9 : 2nd shifts
\newcommand\tnsana@abstract@sign@line[9]{
    \@tkzdeco@node@middle{#2};
    \path
        (M.east) + (.75,0) pic[right]{%
            code = {
                % Axe of abscisses
                \tnsana@abstract@axes{#1}{-0.1,0}{0:2.7}
                % Plot of the function with the signs.
                \draw[#1, thick]
                    (0, #4)   node[xshift = -1.5mm, yshift =#8]
                              {\CircledText{\scriptsize#6}}
                    --
                    (2.5, #5) node[xshift = -4.5mm, yshift = #9]
                              {\CircledText{\scriptsize#7}};
                % 1 root
                \path (1.25,0) node[above, #1]{\footnotesize#3};
        }
    };
}


%    #1 : color
%    #2 : nb of the line
%    #3 : the root
\newcommand\tnsana@sign@line@an[3]{
    \tnsana@abstract@sign@line{#1}{#2}{#3}  %
                              {.65} {-.65}  % 1st and 2nd ordinates
                              {$+$} {$-$}   % 1st and 2nd signs
                              {-4mm}{3.5mm} % 1st and 2nd y shifts
}

%    #1 : color
%    #2 : nb of the line
%    #3 : the root
\newcommand\tnsana@sign@line@ap[3]{
    \tnsana@abstract@sign@line{#1}{#2}{#3}   %
                              {-.65}{.65}    % 1st and 2nd ordinates
                              {$-$} {$+$}    % 1st and 2nd signs
                              {4mm} {-3.5mm} % 1st and 2nd y shifts
}



% PARABOLAS

% ax2+bx+c , ap , dp  -->  \tnsana@sign@parabola@ap@dp
% ax2+bx+c , ap , dn  -->  \tnsana@sign@parabola@ap@dn
% ax2+bx+c , ap , dz  -->  \tnsana@sign@parabola@ap@dz
% ...etc


% a > 0 and delta > 0
%
%    #1 : color
%    #2 : nb of the line
%    #3 : smaller root
%    #4 : bigger root
\newcommand\tnsana@sign@parabola@ap@dp[4]{
    \@tkzdeco@node@middle{#2};
    \path
        (M.east) + (.75,0) pic[right]{%
            code = {
                % Axe of abscisses
                \tnsana@abstract@axes{#1}{-0.1,0}{0:2.7}
                % Plot of the function.
                \draw[#1, thick] (0.25,.6) parabola bend (1.25,-.6) (2.25,.6);
                % The signs.
                \path (.4,.3)     node[left, #1]
                                  {\CircledText{\scriptsize$+$}};
                \path (1.25,0.03) node[below, #1]
                                  {\CircledText{\scriptsize$-$}};
                \path (2.1,.3)    node[right, #1]
                                  {\CircledText{\scriptsize$+$}};
                % 2 roots
                \path (.32,0)  node[below, #1]
                               {\footnotesize#3};
                \path (2.18,0) node[below, #1]
                               {\footnotesize#4};
            }
        };
}


% a < 0 and delta > 0
%
%    #1 : color
%    #2 : nb of the line
%    #3 : smaller root
%    #4 : bigger root
\newcommand\tnsana@sign@parabola@an@dp[4]{
    \@tkzdeco@node@middle{#2};
    \path
        (M.east) + (.75,0) pic[right]{%
            code = {
                % Axe of abscisses
                \tnsana@abstract@axes{#1}{-0.1,0}{0:2.7}
                % Plot of the function.
                \draw[#1, thick] (0.25,-.6) parabola bend (1.25,.6) (2.25,-.6);
                % The signs.
                \path (.4,-.3)     node[left, #1]
                                   {\CircledText{\scriptsize$-$}};
                \path (1.25,-0.03) node[above, #1]
                                   {\CircledText{\scriptsize$+$}};
                \path (2.1,-.3)    node[right, #1]
                                   {\CircledText{\scriptsize$-$}};
                % 2 roots
                \path (.32,0)  node[above, #1]
                               {\footnotesize#3};
                \path (2.18,0) node[above, #1]
                               {\footnotesize#4};
            }
        };
}


% Abstraction for the parabolas with delta = 0
%
%    #1 : color
%    #2 : nb of the line
%    #3 : the root
%    #4 : y shift
%    #5 : 1st ordinate
%    #6 : 2nd ordinate
%    #7 : sign
%    #8 : position
\newcommand\tnsana@abstract@sign@parabola@dz[8]{
    \@tkzdeco@node@middle{#2};
    \path
        (M.east) + (.75,0) pic[right]{%
            code = {
                % Axe of abscisses
                \tnsana@abstract@axes{#1}{-0.1,#6}{0:2.7}
                % Plot of the function.
                \draw[#1, thick] (0.25,#5) parabola bend (1.25,#6) (2.25,#5);
                % The signs.
                \path (.5,#8) node[left, #1]
                              {\CircledText{\scriptsize#7}};
                \path (2,#8)  node[right, #1]
                              {\CircledText{\scriptsize#7}};
                % 1 root
                \path (1.25,#6) node[yshift = #4, #1]
                                {\footnotesize#3};
            }
        };
}


% a > 0 and delta = 0
%
%    #1 : color
%    #2 : nb of the line
%    #3 : root
\newcommand\tnsana@sign@parabola@ap@dz[3]{
    \tnsana@abstract@sign@parabola@dz{#1}{#2}         %
                                     {#3}{0mm, above} % The root and its y shift
                                     {.6}{-.6}        % 1st and 2nd ordinates
                                     {$+$}{-.3}       % The sign and its position
}


% a < 0 and delta = 0
%
%    #1 : color
%    #2 : nb of the line
%    #3 : root
\newcommand\tnsana@sign@parabola@an@dz[3]{
    \tnsana@abstract@sign@parabola@dz{#1}{#2}           %
                                     {#3}{-.1mm, below} % The root and its y shift
                                     {-.6}{.6}          % 1st and 2nd ordinates
                                     {$-$}{.3}          % The sign and its position
}


% Abstraction for the parabolas with delta < 0
%
%    #1 : color
%    #2 : nb of the line
%    #3 : y of the axe
%    #4 : 1st ordinate
%    #5 : 2nd ordinate
%    #6 : sign
%    #7 : ordinate
%    #8 : position
\newcommand\tnsana@abstract@sign@parabola@dn[8]{
    \@tkzdeco@node@middle{#2};
    \path
        (M.east) + (.75,0) pic[right]{%
            code = {
                % Axe of abscisses
                \tnsana@abstract@axes{#1}{-0.1,#3}{0:2.7}
                % Plot of the function.
                \draw[#1, thick] (0.35,#4) parabola bend (1.25,#5) (2.15,#4);
                % The sign.
                \path (1.25,#7) node[#8, #1]
                                {\CircledText{\scriptsize#6}};
            }
        };
}


% a > 0 and delta < 0
%
%    #1 : color
%    #2 : nb of the line
\newcommand\tnsana@sign@parabola@ap@dn[2]{
    \tnsana@abstract@sign@parabola@dn{#1}{#2}         %
                                     {-.55}           % y of the axe
                                     {.57}{-.4}       % 1st and 2nd ordinates
                                     {$+$}{.3}{below} % The sign, its ordinate and its position
}



\newcommand\tnsana@sign@parabola@an@dn[2]{
    \tnsana@abstract@sign@parabola@dn{#1}{#2}          %
                                     {.55}             % y of the axe
                                     {-.57}{.4}        % 1st and 2nd ordinates
                                     {$-$}{-.3}{above} % The sign, its ordinate and its position
}


% REFERENCE

% x2    -->  \tnsana@sign@square
% srqt  -->  \tnsana@sign@square@root
% 1/x   -->  \tnsana@sign@inv
% abs   -->  \tnsana@sign@abs
%
% exp   -->  \tnsana@sign@exp
% ln    -->  \tnsana@sign@ln


% x^2
%
%    #1 : color
%    #2 : nb of the line
\newcommand\tnsana@sign@square[2]{
    \@tkzdeco@node@middle{#2};
    \path
        (M.east) + (.75,0) pic[right]{%
            code = {
                % Axes
                \tnsana@abstract@axes{#1}{-0.1,-0.4}{0:2.7}
                \tnsana@abstract@axes{#1}{1.25,-.6}{90:1.257}
                % Plot of the function.
                \draw[#1, thick] (0.25,.6) parabola bend (1.25,-.4) (2.25,.6);
                % The signs.
                \path (.5,-.1) node[left, #1]
                               {\CircledText{\scriptsize$+$}};
                \path (2,-.1)  node[right, #1]
                               {\CircledText{\scriptsize$+$}};
            }
        };
}


% abs x
%
%    #1 : color
%    #2 : nb of the line
\newcommand\tnsana@sign@abs[2]{
    \@tkzdeco@node@middle{#2};
    \path
        (M.east) + (.75,0) pic[right]{%
            code = {
                % Axes
                \tnsana@abstract@axes{#1}{-0.1,-0.4}{0:2.7}
                \tnsana@abstract@axes{#1}{1.25,-.6}{90:1.257}
                % Plot of the function.
                \draw[#1, thick] (0.1,.6) --++ (1.15,-1) --+ (1.15,1);
                % The signs.
                \path (.5,-.1) node[left, #1]
                               {\CircledText{\scriptsize$+$}};
                \path (2,-.1)  node[right, #1]
                               {\CircledText{\scriptsize$+$}};
            }
        };
}


% sqrt x
%
%    #1 : color
%    #2 : nb of the line
\newcommand\tnsana@sign@sqrt[2]{
    \@tkzdeco@node@middle{#2};
    \path
        (M.east) + (.75,0) pic[right]{%
            code = {
                % Axes
                \tnsana@abstract@axes{#1}{-0.1,-0.4}{0:2.7}
                \tnsana@abstract@axes{#1}{0.1,-.6}{90:1.25}
                % Plot of the function.
                \draw[#1, thick, domain = 0.1:2.5] 
                    % 2.5**-.5 = 0.63
                    plot ({\x}, {.6*sqrt(\x - .1) - .4});
                % The signs.
                \path (.9125,-0.1) node[right, #1]
                                   {\CircledText{\scriptsize$+$}};
            }
        };
}


% 1/x
%
%    #1 : color
%    #2 : nb of the line
\newcommand\tnsana@sign@inv[2]{
    \@tkzdeco@node@middle{#2};
    \path
        (M.east) + (.75,0) pic[right]{%
            code = {
                % Axes
                \tnsana@abstract@axes{#1}{-0.1,0}{0:2.7}
                \tnsana@abstract@axes{#1}{1.25,-.6}{90:1.25}
                % Plot of the function.
                \draw[#1, thick, domain = 1.35:2.35]
                    % .1*.6 * 1.25 = .075
                    %
                    % .065 / (x - 1.25) = .6  <==>  x - 1.25 = .065/.6
                    %                         <==>  x = 1.25 + .065/.6 = 1.358 
                    plot ({\x}, {.065 / (\x - 1.25)});
                \draw[#1, thick, domain = 0.1:1.15]
                    plot ({\x}, {.065 / (\x - 1.25)});
                % The signs.
                    % Cf. parabolas : (1.25 + 2.1)/2 = 1.675
                \path (1.5,.425) node[right, #1]
                                 {\CircledText{\scriptsize$+$}};
                \path (1,-.425)  node[left, #1]
                                 {\CircledText{\scriptsize$-$}};
            }
        };
}


% exp x
%
%    #1 : color
%    #2 : nb of the line
\newcommand\tnsana@sign@exp[2]{
    \@tkzdeco@node@middle{#2};
    \path
        (M.east) + (.75,0) pic[right]{%
            code = {
                % Axes
                \tnsana@abstract@axes{#1}{-0.1,-0.4}{0:2.7}
                \tnsana@abstract@axes{#1}{1.25,-.6}{90:1.25}
                % Plot of the function.
                \draw[#1, thick, domain = -0.1:1.645] 
                    %       .3*exp(3*(x - 1.25)) - .35 = .6
                    % <==>  .3*exp(3*(x - 1.25)) = .95
                    % <==>  x = 1.25 + ln(9.5/3)/3 = 1.634
                    plot ({\x}, {.3*exp(3*(\x - 1.25)) - .35});
                % The signs.
                \path (1,.1) node[left, #1]
                             {\CircledText{\scriptsize$+$}};
            }
        };
}


% ln x
%
%    #1 : color
%    #2 : nb of the line
\newcommand\tnsana@sign@ln[2]{
    \@tkzdeco@node@middle{#2};
    \path
        (M.east) + (.75,0) pic[right]{%
            code = {
                % Axes
                \tnsana@abstract@axes{#1}{-0.1,0}{0:2.7}
                \tnsana@abstract@axes{#1}{0.1,-.6}{90:1.25}
                \draw[->, -Latex, #1] (-0.1,0) --+ (0:2.7);
                \draw[->, -Latex, #1] (0.1,-.6) --+ (90:1.25);
                % Plot of the function.
                \draw[#1, thick, domain = 0.225:2.55]
                    plot ({\x}, {.3*ln((\x - .1))});
                % The signs.
                \path (1.25,.4)    node[right, #1]
                                   {\CircledText{\scriptsize$+$}};
                \path (1.05,-.475) node[left, #1]
                                   {\CircledText{\scriptsize$-$}};
                % 1 root
                \path (1.05,0) node[#1,above]
                               {\footnotesize$1$};
            }
        };
}


% ----------------------- %
% -- INTEGRAL CALCULUS -- %
% ----------------------- %

% Source for minimizing spaces between consecutive integrals :
%    * http://forum.mathematex.net/latex-f6/integrale-triple-t13312.html#p128016

% Consecutive integrals

\let\stdint\int
\DeclareRobustCommand{\int}{%
    \stdint\tnsana@ope@followup{\@ifnextchar{\int}{\!\!}{}}%
}

\def\tnsana@ope@followup#1{%
    \@ifnextchar{^}{\tnsana@ope@followup@sup{#1}}%
        {\tnsana@ope@followup@nosup{#1}}%
}

\def\tnsana@ope@followup@sup#1^#2{%
    \@ifnextchar{_}{\tnsana@ope@followup@sup@sub{#1}^{#2}}%
        {\tnsana@ope@followup@sup@nosub{#1}^{#2}}%
}

\def\tnsana@ope@followup@sup@sub#1^#2_#3{%
    \tnsana@ope@followup@{#1}{#2}{#3}%
}

\def\tnsana@ope@followup@sup@nosub#1^#2{%
    \tnsana@ope@followup@{#1}{#2}{}%
}

\def\tnsana@ope@followup@nosup#1{%
    \@ifnextchar{_}{\tnsana@ope@followup@nosup@sub{#1}}
        {\tnsana@ope@followup@nosup@nosub{#1}}%
}

\def\tnsana@ope@followup@nosup@sub#1_#2{%
    \@ifnextchar{^}{\tnsana@ope@followup@nosup@sub@sup{#1}_{#2}}
        {\tnsana@ope@followup@nosup@sub@nosup{#1}_{#2}}%
}

\def\tnsana@ope@followup@nosup@sub@sup#1_#2^#3{%
    \tnsana@ope@followup@{#1}{#3}{#2}%
}

\def\tnsana@ope@followup@nosup@sub@nosup#1_#2{%
    \tnsana@ope@followup@{#1}{}{#2}%
}

\def\tnsana@ope@followup@nosup@nosub#1{%
    \tnsana@ope@followup@{#1}{}{}%
}

\def\tnsana@ope@followup@#1#2#3{%
    ^{#2}_{#3}#1%
}


% Integration

\newcommand\integrate{\@ifstar{\tnsana@integrate@star}{\tnsana@integrate@no@star}}

\newcommand\tnsana@integrate@star[4]{%
	\int_{#3}^{#4} #1 \dd{#2}%
}

\newcommand\tnsana@integrate@no@star[4]{%
	\tnsana@integrate@star{#1}{#2}{#2\,=\,#3}{#2\,=\,#4}%
}


\newcommand\dintegrate{\@ifstar{\tnsana@dintegrate@star}{\tnsana@dintegrate@no@star}}

\newcommand\tnsana@dintegrate@star[4]{%
	{\displaystyle\integrate*{#1}{#2}{#3}{#4}}%
}

\newcommand\tnsana@dintegrate@no@star[4]{%
	{\displaystyle\integrate{#1}{#2}{#3}{#4}}%
}


% The hook operator

\newcommand\tnsana@hook@small@vertical@phantom[1]{%
	\vphantom{\text{\relsize{1.1}$#1$}}%
}

\newcommand\tnsana@hook@big@vertical@phantom{%
	\vphantom{\relsize{1.25}{\text{$\displaystyle F_1^2$}}}%
}

\newcommand\tnsana@hook@abstract[4][b]{%
    \IfEqCase{#1}{%
        {b}{%
			\left[%
				\tnsana@hook@small@vertical@phantom{#2}%
				\,#2\,%
			\right]%
        }{sb}{%
			\left[%
				\tnsana@hook@big@vertical@phantom \right. \!\!%
				\,#2\,%
				\left. \tnsana@hook@big@vertical@phantom \!\!%
			\right]%
        }{r}{%
            \left. #2\, \right\rvert%
        }{sr}{%
            #2\, {\text{\relsize{1.5}$\rvert$}}%
        }%
    }[
    	\PackageError{tnsana}{unknown option}%
                             {You can use b (default), sb, r or sr.}
    ]%
	_{\,#3}^{\,#4}%
}


\newcommand\hook{\@ifstar{\tnsana@hook@star}{\tnsana@hook@no@star}}

\newcommand\tnsana@hook@star[5][b]{%
	\tnsana@hook@abstract[#1]{#2}{#4}{#5}%
}

\newcommand\tnsana@hook@no@star[5][b]{%
	\tnsana@hook@abstract[#1]{#2}{#3\,=\,#4}{#3\,=\,#5}%
}


% --------------- %
% -- SEQUENCES -- %
% --------------- %

% #1 .. #5 : here are the arguments will be printed.
%
%    #5    #4
%       #1
%    #2    #3

\newcommand\seqsuprageo[5]{%
	\prescript{#5}{#2}{#1}_{#3}^{#4}%
}


\newcommand\seqhypergeo[3]{%
    \seqsuprageo{#1}{#2}{#3}{}{}%
}


\newcommand\seqplus[3]{%
    \seqsuprageo{#1}{}{#2}{#3}{}%
}


% ---------------- %
% -- DSUM DPROD -- %
% ---------------- %

\newcommand\dprod{\prod\limits}
\newcommand\dsum{\sum\limits}


% ---------------------- %
% -- BIG SMALL O N CO -- %
% ---------------------- %

\DeclareMathOperator{\bigomega}{\Omega}
\DeclareMathOperator{\bigtheta}{\Theta}
\DeclareMathOperator{\bigO}{\mathcal{O}}

% Source :
%     * https://tex.stackexchange.com/a/30950/6880
\newcommand\smallO{%
	\mathchoice{% * Display style
        \operatorname{\scriptstyle\mathcal{O}}%
    }{%           * Text style
        \operatorname{\scriptstyle\mathcal{O}}%
    }{%           * Script style
        \operatorname{\scriptscriptstyle\mathcal{O}}%
    }{%           * Script script style
        \operatorname{\scalebox{0.8}{$\scriptscriptstyle\mathcal{O}$}}%
    }
}


% ------------- %
% -- GENERAL -- %
% ------------- %

% -- Semantic probability -- %

\newcommand\proba[2][P]{%
	\def\name{\mathrm{#1}}%
    \mathchoice{% * Display style
        \name{}\mskip-.65\medmuskip\left( #2 \right)%
    }{%           * Text style
        \name{}\mskip-.65\medmuskip\left( #2 \right)%
    }{%           * Script style
        \name{}\left( #2 \right)%
    }{%           * Script script style
        \name{}\left( #2 \right)%
    }
}



% -- Conditional probability -- %

\newcommand\tnsproba@abstract@proba@cond[4]{%
    #1{\proba[#2]{#3 \cap #4}}{\proba[#2]{#4}}%
}


\newcommand\probacond{\@ifstar{\tnsproba@proba@cond@star}{\tnsproba@proba@cond@no@star}}

\newcommand\tnsproba@proba@cond@no@star[3][P]{%
    \proba[#1_{#2}]{#3}%
}

\newcommand\tnsproba@proba@cond@star[3][P]{%
    \proba[#1]{#3 \mid #2}%
}


\newcommand\eprobacond{\@ifstar{\tnsproba@proba@cond@exp@star}{\tnsproba@proba@cond@exp@no@star}}

\newcommand\tnsproba@proba@cond@exp@star[3][P]{%
    \tnsproba@abstract@proba@cond{\frac}{#1}{#3}{#2}
}

\newcommand\tnsproba@proba@cond@exp@no@star[3][P]{%
    \tnsproba@abstract@proba@cond{\dfrac}{#1}{#3}{#2}
}



% -- "Not" event -- %

\newcommand\nevent[1]{%
    \overline{\kern.15ex#1\vphantom{#1^{x}}\kern.15ex}%
}



% -- Expected value - Variance - Standard deviation -- %

\newcommand\expval[2][E]{%
    \proba[#1]{#2}%
}

\newcommand\var[2][V]{%
    \proba[#1]{#2}%
}

\newcommand\stddev[2][\sigma]{%
    \proba[#1]{#2}%
}


% ---------------------- %
% -- CALCULATE EXPVAL -- %
% ---------------------- %

\tcbuselibrary{theorems}

% Sources
%    * https://tex.stackexchange.com/a/475291/6880
%    * https://tex.stackexchange.com/a/558343/6880
%    * https://tex.stackexchange.com/a/558185/6880
%    * https://groups.google.com/g/fr.comp.text.tex/c/mBwIi9yK6xo


% -- DECORATIONS -- %

% Public macros allows very specific use for "advanced" users.

%    #1 : color
%    #2 : node 1
%    #3 : node 2

\newcommand\frameCells[3]{
    \begin{tikzpicture}[remember picture, overlay]
    \node[rounded corners,
          draw       = #1,
          line width = 1pt,
          fit        = (#2.north west) (#2.north east) 
                       (#3.south west) (#3.south east)] {};
    \end{tikzpicture}
}


%    #1 : color
%    #2 : text

\newcommand\frameText[2][blue]{
    \tcboxmath[colframe = #1,
               boxsep   = 1mm, boxrule = 1pt,
               left     = 0mm, right   = 0mm, 
               top      = 0mm, bottom  = 0mm]{#2}
}



% -- EXPECTED VALUE (ALONE) -- %

\edef\restorecatcode{\catcode\number`\_=\number\catcode`\_\relax}
\catcode`\_11
\def\ifDefaultKVKey[#1]#2{\skv_stripsp{\ifDefaultKVKey_i[#1]}{#2}}
\def\ifDefaultKVKey_i[#1]#2{%
    \begingroup
        \restoreKV[#1]%
        \skv_eearg{\gdef\__defaultkey}{\useKV[#1]{#2}}%
    \endgroup
    \skv_eearg{\def\__currentkey}{\useKV[#1]{#2}}%
    \skv_ifx{\__defaultkey\__currentkey}
}
\restorecatcode 


\setKVdefault[tnsproba@calcexpval@keys@default]{%
    disp   = table,
    colors = red - blue - orange - green!70!black,
    %
    name  = lastone,
    reuse = @,
    %
    E = E,
    X = X,
    %
    k  = k,
    xk = x,
    pk = p,
    %
    nosigma = false,
    %
    ope = \cdot,
    %
    com = @,
}


% Hack : we use @ to know if a key has been used.

\setKVdefault[tnsproba@calcexpval@keys@used]{%
%    disp   = @@@,
%    colors = @@@,
    %
%    name  = @@@,
%    reuse = @@@,
    %
    E = @@@,
    X = @@@,
    %
    k  = @@@,
    xk = @@@,
    pk = @@@,
    %
%    nosigma = @@@,
    %
    ope = @@@,
    %
%    com = @@@,
}


%    #1 : name of the set of keys 
%    #2 : key/val indicated

\newcommand\tnsproba@set@keys[2]{
    \useKVdefault[#1]
    \setKV[#1]{#2}

    \gdef\tnsproba@expval@key@disp{\useKV[#1]{disp}}
    \edef\tnsproba@expval@key@colors{\useKV[#1]{colors}}
                % <--- KEEP IT AS AN ARGUMENT!

    \gdef\tnsproba@expval@key@name{\useKV[#1]{name}}%
    \gdef\tnsproba@expval@key@reuse{\useKV[#1]{reuse}}%

    \gdef\tnsproba@expval@key@X{\useKV[#1]{X}}%
    \gdef\tnsproba@expval@key@E{\useKV[#1]{E}}%

    \gdef\tnsproba@expval@key@k{\useKV[#1]{k}}%
    \gdef\tnsproba@expval@key@xk{\useKV[#1]{xk}}%
    \gdef\tnsproba@expval@key@pk{\useKV[#1]{pk}}%

    \gdef\tnsproba@expval@key@nosigma{\useKV[#1]{nosigma}}%

    \gdef\tnsproba@expval@key@ope{\useKV[#1]{ope}}%

    \edef\tnsproba@expval@key@com{\useKV[#1]{com}}%
}



%    #1 : name of the law

\newcommand\tnsproba@save@keys[1]{
    \expandafter\edef\csname tnsproba@expval@key@#1@disp\endcsname%
        {\tnsproba@expval@key@disp}
    
    \expandafter\edef\csname tnsproba@expval@key@#1@colors\endcsname%
        {\tnsproba@expval@key@colors}
                % <--- KEEP IT AS AN ARGUMENT!

    \expandafter\edef\csname tnsproba@expval@key@#1@name\endcsname%
        {\tnsproba@expval@key@name}%

    \expandafter\edef\csname tnsproba@expval@key@#1@reuse\endcsname%
        {\tnsproba@expval@key@reuse}%

    \expandafter\edef\csname tnsproba@expval@key@#1@X\endcsname%
        {\tnsproba@expval@key@X}%

    \expandafter\edef\csname tnsproba@expval@key@#1@E\endcsname%
        {\tnsproba@expval@key@E}%

    \expandafter\edef\csname tnsproba@expval@key@#1@k\endcsname%
        {\tnsproba@expval@key@k}%

    \expandafter\edef\csname tnsproba@expval@key@#1@xk\endcsname%
        {\tnsproba@expval@key@xk}%

    \expandafter\edef\csname tnsproba@expval@key@#1@pk\endcsname%
        {\tnsproba@expval@key@pk}%

    \expandafter\edef\csname tnsproba@expval@key@#1@nosigma\endcsname%
        {\tnsproba@expval@key@nosigma}%

    \expandafter\edef\csname tnsproba@expval@key@#1@ope\endcsname%
        {\tnsproba@expval@key@ope}%

    \expandafter\edef\csname tnsproba@expval@key@#1@com\endcsname%
        {\tnsproba@expval@key@com}%
}


%    #1 : name of the set of keys 
%    #2 : name of the law
%    #3 : key/val indicated

\newcommand\tnsproba@load@keys[3]{
    \useKVdefault[#1]
    \setKV[#1]{#3}
    
    \ifDefaultKVKey[#1]{E}{
        \expandafter\gdef%
        \expandafter\tnsproba@expval@key@E%
        \expandafter{\csname tnsproba@expval@key@#2@E\endcsname}%
    }{
        \gdef\tnsproba@expval@key@E{\useKV[#1]{E}}%
    }
    
    \ifDefaultKVKey[#1]{X}{
        \expandafter\gdef%
        \expandafter\tnsproba@expval@key@X%
        \expandafter{\csname tnsproba@expval@key@#2@X\endcsname}%
    }{
        \gdef\tnsproba@expval@key@X{\useKV[#1]{X}}%
    }

    \ifDefaultKVKey[#1]{k}{
        \expandafter\gdef%
        \expandafter\tnsproba@expval@key@k%
        \expandafter{\csname tnsproba@expval@key@#2@k\endcsname}%
    }{
        \gdef\tnsproba@expval@key@k{\useKV[#1]{k}}%
    }
    
    \ifDefaultKVKey[#1]{pk}{
        \expandafter\gdef%
        \expandafter\tnsproba@expval@key@pk%
        \expandafter{\csname tnsproba@expval@key@#2@pk\endcsname}%
    }{
        \gdef\tnsproba@expval@key@pk{\useKV[#1]{pk}}%
    }
    
    \ifDefaultKVKey[#1]{xk}{
        \expandafter\gdef%
        \expandafter\tnsproba@expval@key@xk%
        \expandafter{\csname tnsproba@expval@key@#2@xk\endcsname}%
    }{
        \gdef\tnsproba@expval@key@xk{\useKV[#1]{xk}}%
    }
    
    \ifDefaultKVKey[#1]{ope}{
        \expandafter\gdef%
        \expandafter\tnsproba@expval@key@ope%
        \expandafter{\csname tnsproba@expval@key@#2@ope\endcsname}%
    }{
        \gdef\tnsproba@expval@key@ope{\useKV[#1]{ope}}%
    }
}


\newcommand\tnsproba@frame@cells@nodeco[3]{}
\newcommand\tnsproba@frame@text@nodeco[2][]{#2}


\newif\iftnsproba@expval@key@Expval@show@table
\newif\iftnsproba@expval@key@Expval@show@comment
\newif\iftnsproba@expval@key@Expval@show@exp
\newif\iftnsproba@expval@key@Expval@show@formal
\newif\iftnsproba@expval@key@Expval@show@eval


\ExplSyntaxOn
% Global variables used.
    \seq_new:N \l__tnsproba_colors_seq
    \tl_new:N  \l__tnsproba_actual_color_temp_tl

    \seq_new:N \l__tnsproba_calcexpval_seq
    \seq_new:N \l__tnsproba_subseq_seq
    \tl_new:N  \l__tnsproba_xline_temp_tl
    \tl_new:N  \l__tnsproba_pline_temp_tl

    \int_new:N \l__tnsproba_nbline_int
    \int_new:N \l__tnsproba_numcol_int
    \int_new:N \l__tnsproba_numcol_deco_int
    \int_new:N \l__tnsproba_numcol_decotwo_int


%    #1 : color
%    #2 : content

    \NewDocumentCommand{\calcexpval}{O{} +m} {
% Keys with default values if it is needed.
        \tnsproba@set@keys{tnsproba@calcexpval@keys@default}{#1}


% Store content for later use, reuse one or just use this.
        \IfStrEq{\tnsproba@expval@key@reuse}{@}{
            \gdef\tnsproba@calc@expval@this@content{#2}

    % Just use this.
            \IfStrEq{\tnsproba@expval@key@name}{@}{
                \gdef\tnsproba@calc@expval@content@lastone{#2}

    % Store the values for a later use.
            }{
                \expandafter\gdef\csname tnsproba@calc@expval@content@\tnsproba@expval@key@name\endcsname{#2}

                \tnsproba@save@keys{\tnsproba@expval@key@name}
            }

    % Reuse something.
        }{    
            \expandafter\ifcsname tnsproba@calc@expval@content@\tnsproba@expval@key@reuse\endcsname
            \else
                \PackageError{tnsproba}%
                    {unknown~name~for~calcexpval:~\tnsproba@expval@key@reuse}{}%
            \fi

            \expandafter\expandafter\expandafter\gdef%
            \expandafter\expandafter\expandafter\tnsproba@calc@expval@this@content%
            \expandafter\expandafter\expandafter{%
                \csname tnsproba@calc@expval@content@\tnsproba@expval@key@reuse\endcsname%
            }
            
            \tnsproba@load@keys{tnsproba@calcexpval@keys@used}%
                               {\tnsproba@expval@key@reuse}{#1}
        }


% What will be shown ?
        \tnsproba@expval@key@Expval@show@tablefalse
        \tnsproba@expval@key@Expval@show@commentfalse
        \tnsproba@expval@key@Expval@show@expfalse
        \tnsproba@expval@key@Expval@show@formalfalse
        \tnsproba@expval@key@Expval@show@evalfalse
        
    
        \IfEqCase{\tnsproba@expval@key@disp}{%
            {table}{
                \tnsproba@expval@key@Expval@show@tabletrue
            }%
            {none}{}%
            {all}{
                \tnsproba@expval@key@Expval@show@tabletrue
                \tnsproba@expval@key@Expval@show@commenttrue
                \tnsproba@expval@key@Expval@show@exptrue
                \tnsproba@expval@key@Expval@show@formaltrue
                \tnsproba@expval@key@Expval@show@evaltrue
            }%
            {exp}{
                \tnsproba@expval@key@Expval@show@exptrue
                \tnsproba@expval@key@Expval@show@formaltrue
                \tnsproba@expval@key@Expval@show@evaltrue
            }%
            {formal}{
                \tnsproba@expval@key@Expval@show@formaltrue
            }%
            {eval}{
                \tnsproba@expval@key@Expval@show@evaltrue
            }%
        }[%
            \PackageError{tnsproba}%
                {unknown~option~for~disp~of~calcexpval}%
                {You~can~use~table~(default),~none,~all,~exp,~formal~or~eval.}%
        ]


        \IfStrEq{\tnsproba@expval@key@nosigma}{false}{}{
            \iftnsproba@expval@key@Expval@show@exp
                \tnsproba@expval@key@Expval@show@formalfalse
            \else
                \PackageError{tnsproba}%
                    {impossible~to~use~nosigma~of~calcexpval~without~explanations~of~the~calculus}%
                    {}%
            \fi
        }{}


        \tnsproba_calcexpval:nn{\\}{&}
    }


% Internal version for expected value
    \cs_new_protected:Nn \tnsproba_calcexpval:nn {
% #1 : line separator
% #2 : cell separator

% Colors.
        \seq_set_split:NnV \l__tnsproba_colors_seq
                           { - }
                           { \tnsproba@expval@key@colors }
        
% Split into lines
        \seq_set_split:NnV \l__tnsproba_calcexpval_seq
                           { #1 }
                           { \tnsproba@calc@expval@this@content{} }
        \int_set:Nn \l__tnsproba_nbline_int
                    { \seq_count:N \l__tnsproba_calcexpval_seq }

% Split each line into cells.
        \seq_pop_left:NN   \l__tnsproba_calcexpval_seq
                           \l__tnsproba_xline_temp_tl
        \seq_set_split:NnV \l__tnsproba_x_seq
                           { #2 }
                           \l__tnsproba_xline_temp_tl
        
        \seq_pop_left:NN   \l__tnsproba_calcexpval_seq
                           \l__tnsproba_pline_temp_tl
        \seq_set_split:NnV \l__tnsproba_p_seq
                           { #2 }
                           \l__tnsproba_pline_temp_tl

% Number of columns (offensive programming)
        \int_set:Nn \l__tnsproba_numcol_int
                    { \seq_count:N \l__tnsproba_x_seq }
        \int_set:Nn \l__tnsproba_numcol_deco_int
                    { 2 }


% The table of values
        \iftnsproba@expval@key@Expval@show@table
            \iftnsproba@expval@key@Expval@show@exp
                \let\decocells\frameCells
            \else
                \let\decocells\tnsproba@frame@cells@nodeco
            \fi


            \[
            \setlength\arraycolsep{.75em}
            \begin{NiceArray}{r*{\l__tnsproba_numcol_int}{|c}}
                \kern.5em\tnsproba@expval@key@xk{}\sb{\tnsproba@expval@key@k{}}
                    & \l__tnsproba_xline_temp_tl \\
                \hline
                \kern.5em\tnsproba@expval@key@pk{}\sb{\tnsproba@expval@key@k{}}
                    & \l__tnsproba_pline_temp_tl
                \CodeAfter

                \int_add:Nn \l__tnsproba_numcol_int {2}

                \bool_while_do:nn {
                    \int_compare_p:nNn { \l__tnsproba_numcol_deco_int } < { \l__tnsproba_numcol_int }
                }{
                    \seq_pop_left:NN  \l__tnsproba_colors_seq
                                      \l__tnsproba_actual_color_temp_tl
                    \seq_put_right:NV \l__tnsproba_colors_seq
                                      \l__tnsproba_actual_color_temp_tl
                    
                    \decocells%
                        {\l__tnsproba_actual_color_temp_tl}%
                        {1-\int_use:N \l__tnsproba_numcol_deco_int}%
                        {2-\int_use:N \l__tnsproba_numcol_deco_int}
        
                    \int_add:Nn \l__tnsproba_numcol_deco_int {2}
                }
            \end{NiceArray}
            \]
        
            \iftnsproba@expval@key@Expval@show@exp
                \par\medskip
            \fi
        \fi
    

% Comment between the calculus of the expected value.
        \iftnsproba@expval@key@Expval@show@comment
            \IfStrEq{\tnsproba@expval@key@com}{@}{}{
                \tnsproba@expval@key@com
                \par\medskip
            }
        \fi


% Explain the calculus of the expected value.
           \int_incr:N \l__tnsproba_numcol_deco_int


% Explain the calculus of the expected value - FORMAL PART.
        \iftnsproba@expval@key@Expval@show@formal
            $%
                \iftnsproba@expval@key@Expval@show@exp
                    \expval[\tnsproba@expval@key@E{}]{\tnsproba@expval@key@X{}} = 
                \fi
                %
                \sum\limits%
                    \sb{\tnsproba@expval@key@k{} = 1}%
                    ^{\int_use:N \l__tnsproba_numcol_int}%
                \tnsproba@expval@key@pk{}\sb{\tnsproba@expval@key@k{}}%
                \tnsproba@expval@key@ope{}%
                \tnsproba@expval@key@xk{}\sb{\tnsproba@expval@key@k{}}$

            \iftnsproba@expval@key@Expval@show@eval
                \par\smallskip
            \fi
        \fi


% Explain the calculus of the expected value - EVAL PART.
        \iftnsproba@expval@key@Expval@show@eval
            \iftnsproba@expval@key@Expval@show@table
                \let\decotext\frameText
            \else
                \let\decotext\tnsproba@frame@text@nodeco
            \fi

            $%
                \iftnsproba@expval@key@Expval@show@exp
                    \expval[\tnsproba@expval@key@E{}]{\tnsproba@expval@key@X{}} = 
                \fi
                %
                 \seq_map_indexed_inline:Nn \l__tnsproba_x_seq {
                    \seq_pop_left:NN \l__tnsproba_p_seq \l__tnsproba_pval_tl
                    \int_if_odd:nTF
                        { \l__tnsproba_numcol_deco_int }
                         { % The num. of the col. is odd.
                            \seq_pop_left:NN  \l__tnsproba_colors_seq 
                                              \l__tnsproba_actual_color_temp_tl
                            \seq_put_right:NV \l__tnsproba_colors_seq 
                                              \l__tnsproba_actual_color_temp_tl
                    
                            \decotext[\l__tnsproba_actual_color_temp_tl]{%
                                \l__tnsproba_pval_tl%
                                \tnsproba@expval@key@ope{}%
                                ##2%
                            }
                        }{ % The num. of the col. is even.
                            \l__tnsproba_pval_tl
                            \tnsproba@expval@key@ope{}%
                            ##2
                        }
            
                    \int_compare:nNnT { ##1 } < { \seq_count:N \l__tnsproba_x_seq }
                                      { + }
                    \int_incr:N \l__tnsproba_numcol_deco_int
                   }
                $
        \fi
    } 
\ExplSyntaxOff


% ----------- %
% -- BASIC -- %
% ----------- %

\useforestlibrary{linguistics}


\forestset{
    apweight/.style = {
        edge label = {
            node[sloped,
                 above,
                 pos  = .5,
                 fill = white] {$#1$}
        }
    },
    bpweight/.style = {
        edge label = {
            node[sloped,
                 below,
                 pos  = .5,
                 fill = white] {$#1$}
        }
    },
    pweight/.style = {
        edge label={
            node[midway,
                 fill = white] {$#1$}
        }
    },
    apweight*/.style = {},
    bpweight*/.style = {},
    pweight*/.style = {},
}


% Sources
%    * https://stackoverflow.com/a/1873617/4589608
%    * https://tex.stackexchange.com/a/511763/6880 (hide/show the weights)
%    * https://tex.stackexchange.com/questions/554843/tikz-forest-align-pcomment*-contents-added-on-the-right-of-the-final-nodes/554855#554855
%    * Option via <...> comes from "Apprendre à programmer en TeX" of Christian Tellechea

\newbool{tnsproba@probatree@asit}
\newbool{tnsproba@probatree@showall}
\newbool{tnsproba@probatree@hideall}


\def\tnsproba@def@new@token#1#2{\let#1= #2}
\tnsproba@def@new@token\tnsproba@space@token{ }

\def\tnsproba@if@next@tok#1#2#3{% #1=token #2=code vrai #3=code faux
    \let\tnsproba@test@tok= #1% stocke le token � tester
    \def\tnsproba@tok@true@code{#2}
    \def\tnsproba@tok@false@code{#3}% et les codes � ex�cuter
    \def\tnsproba@if@next@tok@BIS{\futurelet\nxttok\tnsproba@if@next@tok@ignore@spaces}%
    \tnsproba@if@next@tok@BIS% l'ex�cuter
}

\def\tnsproba@if@next@tok@spaces@not@tested{% macro "normale" qui ne teste pas les espaces
    \ifx\nxttok\tnsproba@test@tok
        \expandafter\tnsproba@tok@true@code% ex�cuter le code vrai
    \else
        \expandafter\tnsproba@tok@false@code% sinon code faux
    \fi
}

\def\tnsproba@if@next@tok@ignore@spaces{% macro qui ignore les espaces
    \ifx\nxttok\tnsproba@space@token% si le prochain token est un espace
        \def\donext{%
            \afterassignment\tnsproba@if@next@tok@BIS% lire le token d'apr�s
            \let\nxttok= % apr�s avoir absorb� l'espace
        }%
    \else
        \let\donext\tnsproba@if@next@tok@spaces@not@tested% sinon, faire le test "normal"
    \fi
    \donext% faire l'action d�cid�e ci-dessus
}


\newenvironment{probatree}{%
    \startprobatree%
}{}

\def\startprobatree#1\end{\tnsproba@tree#1\relax\end}


\long\def\tnsproba@tree{
    \tnsproba@if@next@tok<% si la macro est suivie d'un crochet
        {\tnsproba@tree@spe@options}% aller � la macro � arguments d�limit�s
        {\tnsproba@tree@spe@options<asit>}% sinon, ajouter l'argument optionnel par d�faut entre crochets
}


\long\def\tnsproba@tree@spe@options<#1>#2\relax{%
% Option choosen
    \IfEqCase{#1}{%
        {asit}{\booltrue{tnsproba@probatree@asit}}
        {hideall}{\booltrue{tnsproba@probatree@hideall}}
        {showall}{\booltrue{tnsproba@probatree@showall}}
    }[%
        \PackageError{tnsproba}{unknown option}%
                               {You can use asit (default), hideall or showall.}%
    ]%
    %
    \ifbool{tnsproba@probatree@hideall}{%
        \forestset{
            pweight/.style={},
            apweight/.style={},
            bpweight/.style={},
        }
    }{}%
    %
    \ifbool{tnsproba@probatree@showall}{%
        \forestset{
            apweight*/.style = {
                edge label = {
                    node[sloped,
                         above, 
                         pos  = .5,
                         fill = white] {$##1$}
                }
            },
            bpweight*/.style = {
                edge label = {
                    node[sloped,
                         below, 
                         pos  = .5,
                         fill = white] {$##1$}
                }
            },
            pweight*/.style = {
                edge label={
                    node[midway,
                         fill = white] {$##1$}
                }
            },
        }
    }{}%
    %
% Into the tree...
    \begin{forest}
        for tree = {%
            math content,
            sn edges,
            grow'  = 0,
            l      = 2.5cm,
            s sep  = 1.2cm,
            anchor = parent
        },
        %
        pframe/.style = {
            tikz = {
                \node[rounded corners, 
                      draw,
                      ##1,
                      fit to     = tree,
                      line width = 1.5pt] {};
            }
        },
        %
% USEFUL - TO KEEP !
%
%        pcomment/.style={
%            tikz+={
%                \node [anchor=mid west, xshift=.4cm] at (.mid -| pcomment coord) {##1};
%            },
%        },
        tikz+={
            \coordinate (ptreecomment coord) at (current bounding box.east);
            \coordinate (ptreetag coord) at (current bounding box.north);;
            \coordinate (ptreetag* coord) at (current bounding box.south);
        },
        #2
    \end{forest}
}


% ------------ %
% -- COMENT -- %
% ------------ %

\setKVdefault[tnsproba@comment@keys]{%
    tcol = black,
    dx   = 0cm,
    dy   = 0cm
}


%    #1 : color
%
%    #2 : node
%    #3 : comment

\newcommand\ptreeComment{\@ifstar{\ptree@comment@star}{\ptree@comment@no@star}}

\newcommand\ptree@comment@no@star[3][]{
    \useKVdefault[tnsproba@comment@keys]%
    \setKV[tnsproba@comment@keys]{#1}%
    \edef\tcol{\useKV[tnsproba@comment@keys]{tcol}}%
    \edef\dx{\useKV[tnsproba@comment@keys]{dx}}%
    \edef\dy{\useKV[tnsproba@comment@keys]{dy}}%
	%
	\node[anchor = mid west,
	      xshift = .5cm + \dx,
	      yshift = \dy]
	at (#2.mid -| ptreecomment coord) {\textcolor{\tcol}{#3}};
}


\newcommand\ptree@comment@star[3][]{
    \useKVdefault[tnsproba@comment@keys]%
    \setKV[tnsproba@comment@keys]{#1}%
    \edef\tcol{\useKV[tnsproba@comment@keys]{tcol}}%
    \edef\dx{\useKV[tnsproba@comment@keys]{dx}}%
    \edef\dy{\useKV[tnsproba@comment@keys]{dy}}%
	%
	\node[anchor = mid west,
	      xshift = .825cm,
	      yshift = 0cm]
	at (#2.mid) {\textcolor{\tcol}{#3}};
}


% --------- %
% -- TAG -- %
% --------- %

\setKVdefault[tnsproba@tag@keys]{%
    tcol = black,
    dx   = 0cm,
    dy   = 0cm
}


\newcommand\tnsproba@ptree@tag@leaf@text{}
\newcommand\tnsproba@ptree@tag@leaf@text@color{}

\newcommand\tnsproba@ptree@tag@leaf@dx{}
\newcommand\tnsproba@ptree@tag@leaf@dy{}


% -- LEAF TAGS -- %

%    #1 : number of the node
%    #2 : the node

\newcommand\tnsproba@tag@leaf@abstract@one@node@no@star[2]{
	\ptreeComment[tcol = \tnsproba@ptree@tag@leaf@text@color,
	              dx   = \tnsproba@ptree@tag@leaf@dx,
	              dy   = \tnsproba@ptree@tag@leaf@dy]%
	             {#2}%
	             {\tnsproba@ptree@tag@leaf@text}
}


\newcommand\tnsproba@tag@leaf@abstract@one@node@star[2]{
	\ptreeComment*[tcol = \tnsproba@ptree@tag@leaf@text@color,
	               dx   = \tnsproba@ptree@tag@leaf@dx,
	               dy   = \tnsproba@ptree@tag@leaf@dy]%
	              {#2}%
	              {\tnsproba@ptree@tag@leaf@text}
}


%    #1 : node1 | node2 | ...

\newcommand\tnsproba@ptree@tag@leaf@abstract@multi@nodes@no@star[1]{
% Note
%
%    #1 : macro to apply
%    #2 : multi-args
	\tns@multi@apply@each%
	    {\tnsproba@tag@leaf@abstract@one@node@no@star}%
	    {#1}
}


\newcommand\tnsproba@ptree@tag@leaf@abstract@multi@nodes@star[1]{
% Note
%
%    #1 : macro to apply
%    #2 : multi-args
	\tns@multi@apply@each%
	    {\tnsproba@tag@leaf@abstract@one@node@star}%
	    {#1}
}

%    #1 : color
%
%    #2 : names of the nodes separated by |
%    #3 : tag

\newcommand\ptreeTagLeaf{\@ifstar{\ptree@tag@leaf@star}{\ptree@tag@leaf@no@star}}


%    #4 : the macro to print the special comments.

\newcommand\ptree@tag@leaf@star@no@star[4]{
    \useKVdefault[tnsproba@tag@keys]%
    \setKV[tnsproba@tag@keys]{#1}%
    \renewcommand\tnsproba@ptree@tag@leaf@text@color{\useKV[tnsproba@tag@keys]{tcol}}%
    \renewcommand\tnsproba@ptree@tag@leaf@dx{\useKV[tnsproba@tag@keys]{dx}}%
    \renewcommand\tnsproba@ptree@tag@leaf@dy{\useKV[tnsproba@tag@keys]{dy}}%
	%
	\renewcommand\tnsproba@ptree@tag@leaf@text{#3}%
	%
	#4{#2}
}


\newcommand\ptree@tag@leaf@no@star[3][]{
    \ptree@tag@leaf@star@no@star{#1}{#2}{#3}%
                                {\tnsproba@ptree@tag@leaf@abstract@multi@nodes@no@star}
}


\newcommand\ptree@tag@leaf@star[3][]{
    \ptree@tag@leaf@star@no@star{#1}{#2}{#3}%
                                {\tnsproba@ptree@tag@leaf@abstract@multi@nodes@star}
}



% -- LEVEL TAGS -- %

%    #1 : color
%
%    #2 : name of a node at the level wanted
%    #3 : tag

\newcommand\ptreeTagLevel{\@ifstar{\ptree@tag@level@star}{\ptree@tag@level@no@star}}


\newcommand\ptree@tag@level@no@star[3][]{
    \useKVdefault[tnsproba@tag@keys]%
    \setKV[tnsproba@tag@keys]{#1}%
    \edef\tcol{\useKV[tnsproba@tag@keys]{tcol}}%
    \edef\dx{\useKV[tnsproba@tag@keys]{dx}}%
    \edef\dy{\useKV[tnsproba@tag@keys]{dy}}%
	%
	\node[anchor = north,
	      xshift = \dx,
	      yshift = \dy + .75cm]
	at (#2.mid |- ptreetag coord) {\textcolor{\tcol}{#3}};
}


\newcommand\ptree@tag@level@star[3][]{
    \useKVdefault[tnsproba@tag@keys]%
    \setKV[tnsproba@tag@keys]{#1}%
    \edef\tcol{\useKV[tnsproba@tag@keys]{tcol}}%
    \edef\dx{\useKV[tnsproba@tag@keys]{dx}}%
    \edef\dy{\useKV[tnsproba@tag@keys]{dy}}%
	%
	\node[anchor = south,
	      xshift = \dx,
	      yshift = \dy - .75cm]
	at (#2.mid |- ptreetag* coord) {\textcolor{\tcol}{#3}};
}


% ----------------- %
% -- TEXTOFNODES -- %
% ----------------- %

% -- TEXT OF A NODE -- %

% Source
%    * https://tex.stackexchange.com/a/559441/6880

\protected\def\tikz@fig@main#1{%
    \expandafter\gdef\csname labeltextof@\tikz@fig@name\endcsname{#1}%
    \iftikz@node@is@pic%
        \tikz@node@is@picfalse%
        \tikz@subpicture@handle{#1}%
    \else%
        \tikz@@fig@main#1\egroup%
    \fi
}


%   #1 : name of the node

\newcommand\ptreeTextOf[1]{\csname labeltextof@#1\endcsname}



% -- COLORS OF A NODE -- %

\setKVdefault[tnsproba@node@col@keys]{%
    tcol = black,
    bcol = white
}

%   #1 : name of the node
%   #2 : options for the colors (text and/or backgorund}

\newcommand\ptreeNodeColor[2]{
    \useKVdefault[tnsproba@node@col@keys]%
    \setKV[tnsproba@node@col@keys]{#2}%
    \edef\tcol{\useKV[tnsproba@node@col@keys]{tcol}}%
    \edef\bcol{\useKV[tnsproba@node@col@keys]{bcol}}%
    %
    \path (#1.center) node[rounded corners,
                           \tcol,
                           fill = \bcol] {\ptreeTextOf{#1}};
}



% -- NEW TEXT OF A NODE -- %

\setKVdefault[tnsproba@node@new@txt@keys]{%
    tcol = black,
    bcol = white
}

%   #1 : options for the colors (text and/or backgorunds}
%   #2 : name of the node
%   #3 : new text

\newcommand\ptreeNodeNewText[3][tcol=black, bcol=white]{
    \useKVdefault[tnsproba@node@new@txt@keys]%
    \setKV[tnsproba@node@new@txt@keys]{#1}%
    \edef\tcol{\useKV[tnsproba@node@new@txt@keys]{tcol}}%
    \edef\bcol{\useKV[tnsproba@node@new@txt@keys]{bcol}}%
	% Hide the original node.
    \path (#2.center) node[rounded corners,
                           \bcol,
                           fill = \bcol] {\ptreeTextOf{#2}};
  	% Add the new node
	\path (#2.center) node[rounded corners,
	                       \tcol,
	                       fill = \bcol] {#3};
}


% ----------- %
% -- FRAME -- %
% ----------- %

\setKVdefault[tnsproba@frame@keys]{%
    lcol = blue
}


% #1 : color
% #2 : left start corner
% #3 : right up   corner
% #4 : right down corner
\newcommand\ptreeFrame[4][]{%
    \useKVdefault[tnsproba@frame@keys]%
    \setKV[tnsproba@frame@keys]{#1}%
    \edef\lcol{\useKV[tnsproba@frame@keys]{lcol}}%
    %
    \node[rounded corners,
          draw       = \lcol,
          line width = 1.5pt,
          fit        = (#2)(#3)(#4)] {};
}


% ---------------- %
% -- FOCUS EDGE -- %
% ---------------- %

%    #1 : number of the node
%    #2 : the node

\newcommand\tnsproba@ptree@focus@abstract@node[2]{
    \ptreeNodeColor{#2}{tcol = \tnsproba@ptree@focus@text@color,
                        bcol = \tnsproba@ptree@focus@back@color}
    %
	\node[rounded corners,
          draw       = \tnsproba@ptree@focus@line@color,
          line width = 1.5pt,
          inner sep  = 0pt,
          fit        = (#2)(#2)(#2)] {};
}


%    #1 : number of the node
%    #2 : the node

\newcommand\tnsproba@ptree@focus@abstract@node@nostart[2]{
	\ifnum#1=1\else
    	\tnsproba@ptree@focus@abstract@node{#1}{#2}
    \fi
}


%    #1 : node1 | node2 | ...

\newcommand\tnsproba@ptree@focus@abstract@multi@nodes[1]{
% Note
%
%    #1 : macro to apply
%    #2 : multi-args
	\tns@multi@apply@each%
	    {\tnsproba@ptree@focus@abstract@node}%
	    {#1}
}


\newcommand\tnsproba@ptree@focus@abstract@multi@nodes@nostart[1]{
	\tns@multi@apply@each%
	    {\tnsproba@ptree@focus@abstract@node@nostart}%
	    {#1}
}



%    #1 : number of the couple of nodes
%    #2 : start of the edge
%    #3 : end   of the edge

\newcommand\tnsproba@ptree@focus@abstract@edge[3]{
    \draw[\tnsproba@ptree@focus@line@color,
          line cap   = round,
          line width = 1.5pt] 
    	  (#2.parent anchor) -- (#3.child anchor);
}


%    #1 : node1 | node2 | ...

\newcommand\tnsproba@ptree@focus@abstract@multi@edges[1]{
% Note
%
%    #1 : macro to apply
%    #2 : multi-args
	\tns@multi@apply@overlapping@couples%
	    {\tnsproba@ptree@focus@abstract@edge}%
	    {#1}
}


% Options

\newcommand\tnsproba@ptree@do@nothing[1]{}

\newcommand\tnsproba@ptree@focus@line@color{}
\newcommand\tnsproba@ptree@focus@text@color{}
\newcommand\tnsproba@ptree@focus@back@color{}

\setKVdefault[tnsproba@focus@keys]{%
    tcol  = black,
    bcol  = white,
    lcol  = blue,
    frame = nostart
}


%    #1 : options
%
%    #2 : node1 | node2 | ...

\newcommand\ptreeFocus[2][]{
    \useKVdefault[tnsproba@focus@keys]%
    \setKV[tnsproba@focus@keys]{#1}%
    %
    \renewcommand\tnsproba@ptree@focus@line@color{\useKV[tnsproba@focus@keys]{lcol}}%
    \renewcommand\tnsproba@ptree@focus@text@color{\useKV[tnsproba@focus@keys]{tcol}}%
    \renewcommand\tnsproba@ptree@focus@back@color{\useKV[tnsproba@focus@keys]{bcol}}%
    %
    \edef\frame{\useKV[tnsproba@focus@keys]{frame}}%
    %
	\tnsproba@ptree@focus@abstract@multi@edges{#2}
	%
	\IfEqCase{\frame}{%
		{nostart}{\let\tocall\tnsproba@ptree@focus@abstract@multi@nodes@nostart}%
		{start}{\let\tocall\tnsproba@ptree@focus@abstract@multi@nodes}%
		{none}{\let\tocall\tnsproba@ptree@do@nothing}%
	}[%
        \PackageError{tnsproba}{unknown option for frame of ptreeFocus}%
                               {You can use nostart (default), start or none.}%
    ]%
	%
	\tocall{#2}
}


% -------------- %
% -- AUTO NUM -- %
% -------------- %

% -- COMMENTS WITH AUTO NUMBERING -- %

% #1 : color
%
% #2 : node
% #3 : comment

\newcommand\aptreeComment{\@ifstar{\aptree@comment@star}{\aptree@comment@no@star}}

\newcommand\aptree@comment@no@star[3][]{
	\ptree@comment@no@star[#1]{!#2}{#3}
}



\newcommand\aptree@comment@star[3][]{
	\ptree@comment@star[#1]{!#2}{#3}
}



% -- LEAF TAGS WITH AUTO NUMBERING -- %


%    #1 : number of the node
%    #2 : the node

\newcommand\tnsproba@tag@leaf@abstract@one@node@no@star@auto[2]{
	\ptreeComment[tcol = \tnsproba@ptree@tag@leaf@text@color,
	              dx   = \tnsproba@ptree@tag@leaf@dx,
	              dy   = \tnsproba@ptree@tag@leaf@dy]%
	             {!#2}%
	             {\tnsproba@ptree@tag@leaf@text}
}


\newcommand\tnsproba@tag@leaf@abstract@one@node@star@auto[2]{
	\ptreeComment*[tcol = \tnsproba@ptree@tag@leaf@text@color,
	               dx   = \tnsproba@ptree@tag@leaf@dx,
	               dy   = \tnsproba@ptree@tag@leaf@dy]%
	              {!#2}%
	              {\tnsproba@ptree@tag@leaf@text}
}


%    #1 : node1 | node2 | ...

\newcommand\tnsproba@ptree@tag@leaf@abstract@multi@nodes@no@star@auto[1]{
% Note
%
%    #1 : macro to apply
%    #2 : multi-args
	\tns@multi@apply@each%
	    {\tnsproba@tag@leaf@abstract@one@node@no@star@auto}%
	    {#1}
}


\newcommand\tnsproba@ptree@tag@leaf@abstract@multi@nodes@star@auto[1]{
% Note
%
%    #1 : macro to apply
%    #2 : multi-args
	\tns@multi@apply@each%
	    {\tnsproba@tag@leaf@abstract@one@node@star@auto}%
	    {#1}
}

%    #1 : color
%
%    #2 : names of the nodes separated by |
%    #3 : tag

\newcommand\aptreeTagLeaf{\@ifstar{\aptree@tag@leaf@star}{\aptree@tag@leaf@no@star}}


%    #4 : the macro to print the special comments.

\newcommand\aptree@tag@leaf@star@no@star[4]{
    \useKVdefault[tnsproba@tag@keys]%
    \setKV[tnsproba@tag@keys]{#1}%
    \renewcommand\tnsproba@ptree@tag@leaf@text@color{\useKV[tnsproba@tag@keys]{tcol}}%
    \renewcommand\tnsproba@ptree@tag@leaf@dx{\useKV[tnsproba@tag@keys]{dx}}%
    \renewcommand\tnsproba@ptree@tag@leaf@dy{\useKV[tnsproba@tag@keys]{dy}}%
	%
	\renewcommand\tnsproba@ptree@tag@leaf@text{#3}%
	%
	#4{#2}
}


\newcommand\aptree@tag@leaf@no@star[3][]{
    \aptree@tag@leaf@star@no@star{#1}{#2}{#3}%
                                 {\tnsproba@ptree@tag@leaf@abstract@multi@nodes@no@star@auto}
}


\newcommand\aptree@tag@leaf@star[3][]{
    \aptree@tag@leaf@star@no@star{#1}{#2}{#3}%
                                 {\tnsproba@ptree@tag@leaf@abstract@multi@nodes@star@auto}
}



% -- LEVEL TAGS WITH AUTO NUMBERING -- %


\newcommand\aptreeTagLevel{\@ifstar{\aptree@tag@level@star}{\aptree@tag@level@no@star}}

\newcommand\aptree@tag@level@no@star[3][]{
	\ptree@tag@level@no@star[#1]{!#2}{#3}
}

\newcommand\aptree@tag@level@star[3][]{
	\ptree@tag@level@star[#1]{!#2}{#3}
}



% -- FOCUS WITH AUTO NUMBERING -- %

%    #1 : number of the node
%    #2 : the node

\newcommand\tnsproba@ptree@focus@auto@abstract@node[2]{
%    \aptreeNodeColor{!#2}{tcol = \tnsproba@ptree@focus@text@color, bcol = \tnsproba@ptree@focus@back@color}
    %
	\node[rounded corners,
          draw       = \tnsproba@ptree@focus@line@color,
          line width = 1.5pt,
          inner sep  = 0pt,
          fit        = (!#2)(!#2)(!#2)] {};
}


%    #1 : number of the node
%    #2 : the node

\newcommand\tnsproba@ptree@focus@auto@abstract@node@nostart[2]{
	\ifnum#1=1\else
    	\tnsproba@ptree@focus@auto@abstract@node{#1}{#2}
    \fi
}


%    #1 : node1 | node2 | ...

\newcommand\tnsproba@ptree@focus@auto@abstract@multi@nodes[1]{
% Note
%
%    #1 : macro to apply
%    #2 : multi-args
	\tns@multi@apply@each%
		{\tnsproba@ptree@focus@auto@abstract@node}%
		{#1}
}


\newcommand\tnsproba@ptree@focus@auto@abstract@multi@nodes@nostart[1]{
	\tns@multi@apply@each%
		{\tnsproba@ptree@focus@auto@abstract@node@nostart}%
		{#1}
}


%    #1 : number of the couple of nodes
%    #2 : start of the edge
%    #3 : end   of the edge

\newcommand\tnsproba@ptree@focus@auto@abstract@edge[3]{
    \draw[\tnsproba@ptree@focus@line@color,
          line cap   = round,
          line width = 1.5pt]
    	  (!#2.parent anchor) -- (!#3.child anchor);
}


%    #1 : node1 | node2 | ...

\newcommand\tnsproba@ptree@focus@auto@abstract@multi@edges[1]{
% Note
%
%    #1 : macro to apply
%    #2 : multi-args
	\tns@multi@apply@overlapping@couples%
		{\tnsproba@ptree@focus@auto@abstract@edge}%
	    {#1}
}


% Options

\setKVdefault[tnsproba@focus@auto@keys]{%
%    tcol  = black,
%    bcol  = white,
    lcol  = blue,
    frame = nostart
}


%    #1 : options
%
%    #2 : node1 | node2 | ...

\newcommand\aptreeFocus[2][]{
    \useKVdefault[tnsproba@focus@auto@keys]%
    \setKV[tnsproba@focus@auto@keys]{#1}%
    %
    \renewcommand\tnsproba@ptree@focus@line@color{\useKV[tnsproba@focus@auto@keys]{lcol}}%
%    \renewcommand\tnsproba@ptree@focus@text@color{\useKV[tnsproba@focus@auto@keys]{tcol}}%
%    \renewcommand\tnsproba@ptree@focus@back@color{\useKV[tnsproba@focus@auto@keys]{bcol}}%
    %
    \edef\frame{\useKV[tnsproba@focus@auto@keys]{frame}}%
    %
	\tnsproba@ptree@focus@auto@abstract@multi@edges{#2}
	%
	\IfEqCase{\frame}{%
		{nostart}{\let\tocall\tnsproba@ptree@focus@auto@abstract@multi@nodes@nostart}%
		{start}{\let\tocall\tnsproba@ptree@focus@auto@abstract@multi@nodes}%
		{none}{\let\tocall\tnsproba@ptree@do@nothing}%
	}[%
        \PackageError{tnsproba}{unknown option for frame of aptreeFocus}%
                               {You can use nostart (default), start or none.}%
    ]%
	%
	\tocall{#2}
}



% -- FRAMES WITH AUTO NUMBERING -- %

% #1 : color
% #2 : left start corner
% #3 : right up   corner
% #4 : right down corner
\newcommand\aptreeFrame[4][]{%
    \ptreeFrame[#1]{!#2}{!#3}{!#4}%
}


% --------------------- %
% -- BASIC OPERATORS -- %
% --------------------- %

\newcommand\divides{\mid}
\newcommand\ndivides{\nmid}

\newcommand\nequiv{\centernot\equiv}

\newcommand\modulo{\bmod}


% --------------------- %
% -- NAMED FUNCTIONS -- %
% --------------------- %

% Classical functions - START

\DeclareMathOperator{\pgcd}{\operatorname{pgcd}}
\DeclareMathOperator{\ppcm}{\operatorname{ppcm}}
\DeclareMathOperator{\lcm}{\operatorname{lcm}}

% Classical functions - END


% ------------------------ %
% -- CONTINUED FRACTION -- %
% ------------------------ %

% Sources :
%    * https://groups.google.com/forum/?hl=fr&fromgroups#!topic/fr.comp.text.tex/UrUZiurKwm0
%    * http://tex.stackexchange.com/questions/68190/continued-fraction-in-inline-equations/68196#68196
%    * http://tex.stackexchange.com/questions/23432/how-to-create-my-own-math-operator-with-limits


% -- OPERATOR -- %

\newcommand\contfracope{%
    \operatornamewithlimits{%
        \mathchoice{% * Display style
            \vcenter{\hbox{\huge $\mathcal{K}$}}%
        }{%           * Text style
            \vcenter{\hbox{\Large $\mathcal{K}$}}%
        }{%           * Script style
            \mathrm{\mathcal{K}}%
        }{%           * Script script style
            \mathrm{\mathcal{K}}%
        }
    }
}



% -- SINGLE CONTINUED FRACTION -- %

\newcommand\tnsarith@single@contfrac[2]{%
    \begin{array}{@{}c@{}}%
        \multicolumn{1}{c|}{#1}%
        \\%
        \hline%
        \multicolumn{1}{|c}{#2}%
    \end{array}%
}



% -- STANDARD CONTINUED FRACTION - LONG -- %

\newcommand\contfrac{\@ifstar{\tnsarith@contfrac@star}{\tnsarith@contfrac@no@star}}


% Display style

\newcommand\tnsarith@contfrac@no@star[1]{%
    \tnsarith@contfrac@no@star@recu@{\cfrac}#1|\@nil%
}

\def\tnsarith@contfrac@no@star@recu@#1#2|#3\@nil{%
    \if\relax\detokenize{#3}\relax%
        #2%
    \else%
        #2 + #1{1}{\tnsarith@contfrac@no@star@recu@#1#3\@nil}%
    \fi%
}


% Inline style

\newcommand\tnsarith@single@contfrac@star@part[2]{%
    \ifnum#1=1
        #2%
    \else%
        + \tnsarith@single@contfrac{1}{#2}%
    \fi%
}

\newcommand\tnsarith@contfrac@star[1]{%
    \tns@multi@apply@each{\tnsarith@single@contfrac@star@part}{#1}
}



% -- STANDARD CONTINUED FRACTION - SHORT -- %

\newcommand\scontfrac{\@ifstar{\tnsarith@short@contfrac@star}{\tnsarith@short@contfrac@no@star}}


% Display style

\newcommand\tnsarith@short@contfrac@no@star[1]{%
    \tnsarith@short@contfrac@no@star@recu@{\cfrac}#1|\@nil%
}

\def\tnsarith@short@contfrac@no@star@recu@#1#2|#3\@nil{%
	#1{1}{%
		\if\relax\detokenize{#3}\relax%
            #2%
        \else%
            #2 + \tnsarith@short@contfrac@no@star@recu@#1#3\@nil%
        \fi%
	}%
}


% Inline style

\newcommand\tnsarith@single@short@contfrac@star@part[2]{%
    \ifnum#1=1\else%
        +%
    \fi%
    \tnsarith@single@contfrac{1}{#2}%
}

\newcommand\tnsarith@short@contfrac@star[1]{%
    \tns@multi@apply@each{\tnsarith@single@short@contfrac@star@part}{#1}
}



% -- GENERALIZED CONTINUED FRACTION - LONG -- %

\newcommand\contfracgene{\@ifstar{\tnsarith@contfracgene@star}{\tnsarith@contfracgene@no@star}}


% Display style

\newcommand\tnsarith@contfracgene@no@star[1]{%
    \tnsarith@contfracgene@no@star@recu@#1||\@nil%
}

\def\tnsarith@contfracgene@no@star@recu@#1|#2|#3\@nil{%
    \@ifmtarg{#2}{%
        #1%
    }{%
        #1 + \cfrac{#2}{\tnsarith@contfracgene@no@star@recu@#3\@nil}%
    }%
}


% Inline style

\newcommand\tnsarith@contfracgene@star[1]{%
    \tnsarith@contfracgene@star@before@#1|\@nil%
}
\def\tnsarith@contfracgene@star@before@#1|#2\@nil{%
    \@ifmtarg{#2}{%
        #1%
    }{%
        #1 \tnsarith@contfracgene@star@recu@#2\@nil%
    }%
}
\def\tnsarith@contfracgene@star@recu@#1|#2|#3\@nil{%
    \@ifmtarg{#3}{%
        + \tnsarith@single@contfrac{#1}{#2}%
    }{%
        + \tnsarith@single@contfrac{#1}{#2} \tnsarith@contfracgene@star@recu@#3\@nil%
    }%
}



% -- GENERALIZED CONTINUED FRACTION - SHORT -- %

\newcommand\scontfracgene{\@ifstar{\tnsarith@short@contfracgene@star}{\tnsarith@short@contfracgene@no@star}}


% Display style

\newcommand\tnsarith@short@contfracgene@no@star[1]{%
    \tnsarith@short@contfracgene@no@star@recu@#1|\@nil%
}

\def\tnsarith@short@contfracgene@no@star@recu@#1|#2|#3\@nil{%
	\cfrac{#1}{%
		#2
		\if\relax\detokenize{#3}\relax\else%
		+ \tnsarith@short@contfracgene@no@star@recu@#3\@nil%
		\fi%
	}
}


% Inline style

\newcommand\tnsarith@short@contfracgene@star[1]{%
    \tnsarith@short@contfracgene@star@recu@#1|\@nil%
}

\def\tnsarith@short@contfracgene@star@recu@#1|#2|#3\@nil{%
    \tnsarith@single@contfrac{#1}{#2} %
    \if\relax\detokenize{#3}\relax\else%
        + \tnsarith@short@contfracgene@star@recu@#3\@nil%
    \fi%
}


% -------------- %
% -- MATRICES -- %
% -------------- %

\NiceMatrixOptions{renew-dots, renew-matrix}


% --------- %
% -- DET -- %
% --------- %

% -- DETERMINANT 2x2 -- %

\newbool{tnslinalg@calc@det@option@loop}   % Default.
\newbool{tnslinalg@calc@det@option@arrows}
\newbool{tnslinalg@calc@det@option@cross}
\newbool{tnslinalg@calc@det@option@nodeco}

\newbool{tnslinalg@calc@det@option@exp}   % Default.
\newbool{tnslinalg@calc@det@option@cexp}
\newbool{tnslinalg@calc@det@option@texp}


\newcommand\tnslinalg@validate@calc@det@option[1]{
    \IfEqCase{#1}{%
        {loop}{\booltrue{tnslinalg@calc@det@option@loop}}
        {arrows}{\booltrue{tnslinalg@calc@det@option@arrows}}
        {cross}{\booltrue{tnslinalg@calc@det@option@cross}}
        {nodeco}{\booltrue{tnslinalg@calc@det@option@nodeco}}
        %
        {exp}{\booltrue{tnslinalg@calc@det@option@exp}}
        {cexp}{\booltrue{tnslinalg@calc@det@option@cexp}}
        {texp}{\booltrue{tnslinalg@calc@det@option@texp}}
    }[%
        \PackageError{tnslinalg}{unknown option}%
                             {You can use exp, cexp, texp, loop, arrows, cross or nodeco.}%
    ]%
}


%   #1 : option for the formatting
%
%   #2  #3		x  x'
%   #4  #5      y  y'

\newcommand\calcdettwo[5][nodeco]{%
    \boolfalse{tnslinalg@calc@det@option@loop}
    \boolfalse{tnslinalg@calc@det@option@arrows}
    \boolfalse{tnslinalg@calc@det@option@cross}
    \boolfalse{tnslinalg@calc@det@option@nodeco}
    %
    \boolfalse{tnslinalg@calc@det@option@exp}
    \boolfalse{tnslinalg@calc@det@option@cexp}
    \boolfalse{tnslinalg@calc@det@option@texp}
    %
    \DoWithCSL\tnslinalg@validate@calc@det@option{#1}%
    %
    \ifboolexpr{
		(
			bool{tnslinalg@calc@det@option@exp}
			or
			bool{tnslinalg@calc@det@option@cexp}
			or
			bool{tnslinalg@calc@det@option@texp}
		)
		and
		(
			bool{tnslinalg@calc@det@option@loop}
			or
			bool{tnslinalg@calc@det@option@arrows}
			or
			bool{tnslinalg@calc@det@option@cross}
			or
			bool{tnslinalg@calc@det@option@nodeco}
		)
	}{%
        \PackageError{tnslinalg}{illegal use of options}%
                             {You can't use exp, cexp or texp with also loop, arrows, cross or nodeco.}%
	}{}%
    % Expansion
    \ifboolexpr{
		bool{tnslinalg@calc@det@option@exp}
		or
		bool{tnslinalg@calc@det@option@cexp}
		or
		bool{tnslinalg@calc@det@option@texp}
	}{
        \def\expsymbol{\,}%
        %
        \ifbool{tnslinalg@calc@det@option@cexp}{%
            \def\expsymbol{\cdot}%
        }{}%
        %
        \ifbool{tnslinalg@calc@det@option@texp}{%
            \def\expsymbol{\times}%
        }{}%
        %
        \tns@prop@prod{\expsymbol}%
                      {#2}{#3}%
                      {#4}{#5}%
	}{
    % No expansion
        % Default values
        \def\tocall{\tns@det@plane@no@deco}%
        %
        \ifbool{tnslinalg@calc@det@option@arrows}{%
            \def\tocall{\tns@det@plane@deco@arrows}%  
        }{}%
        %
        \ifbool{tnslinalg@calc@det@option@cross}{%
            \def\tocall{\tns@det@plane@deco@cross}%  
        }{}%
        %
        \ifbool{tnslinalg@calc@det@option@loop}{%
            \def\tocall{\tns@det@plane@deco@loop}%  
        }{}%
        %
        \tocall{novec}%
               {}{#2}{#4}%
               {}{#3}{#5}%
	}
}


% ----------------------- %
% -- POLYNOMIAL AND CO -- %
% ----------------------- %

% #1 : the set
% #2 : a multi-argument for the variable(s)
% #3 : the 1st decorator
% #4 : the 2nd decorator
% #5 : the number of decorators

\newcommand\tnspoly@set@special@algebra[5]{%
    \ensuremath{%
        #1 \! %
        \ifx1#5%
            \tns@generic@interval@semi@ext{#3}{}{%
                \tns@multi@wrap{|}{#2}{}{\tnsmathsep}{}%
            }{\!}{#4}%
        \else%
            \tns@generic@interval@semi@ext{#3}{}{%
                \tns@generic@interval@semi@ext{#3}{}{%
                    \tns@multi@wrap{|}{#2}{}{\tnsmathsep}{}%
                }{}{#4}\!%
            }{}{#4}%
        \fi
    }%
}


% #1 : the set
% #2 : a multi-argument for the variable(s)

\newcommand\setpoly[2]{%
    \tnspoly@set@special@algebra{#1}{#2}{[}{]}{1}%
}


% #1 : the set
% #2 : a multi-argument for the variable(s)

\newcommand\setpolyfrac[2]{%
    \tnspoly@set@special@algebra{#1}{#2}{(}{)}{1}%
}


% #1 : the set
% #2 : a multi-argument for the variable(s)

\newcommand\setserie[2]{%
    \tnspoly@set@special@algebra{#1}{#2}{[}{]}{2}%
}


% #1 : the set
% #2 : a multi-argument for the variable(s)

\newcommand\setseriefrac[2]{%
    \tnspoly@set@special@algebra{#1}{#2}{(}{)}{2}%
}


% #1 : the set
% #2 : a multi-argument for the variable(s)

\newcommand\setpolylaurent[2]{%
    \tnspoly@set@special@algebra{#1}{#2}{\{}{\}}{1}%
}


% #1 : the set
% #2 : a multi-argument for the variable(s)

\newcommand\setserielaurent[2]{%
    \tnspoly@set@special@algebra{#1}{#2}{\{}{\}}{2}%
}
